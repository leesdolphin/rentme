# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-22 11:41
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import rentme.data.models._utils
import rentme.data.models.listings


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0002_auto_20170618_0717'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('address', models.TextField(help_text='The address of the company HQ.', null=True)),
                ('city', models.TextField(help_text='The city where the company HQ is located.', null=True)),
                ('e_mail', models.TextField(help_text='A contact email address for the company.', null=True)),
                ('fax_number', models.TextField(help_text='A fax number for the company.', null=True)),
                ('id', models.IntegerField(help_text='The ID of the company.', primary_key=True, serialize=False)),
                ('is_job_agency', models.NullBooleanField(help_text='Indicates whether the agency does job listings.')),
                ('is_licensed_property_agency', models.NullBooleanField(help_text='Indicates whether the agency is an REAA licensed property agency')),
                ('is_real_estate_agency', models.NullBooleanField(help_text='Indicates whether the agency does real estate.')),
                ('logo', models.TextField(help_text='A URL for the company logo.', null=True)),
                ('logo2', models.TextField(help_text='A URL for the second company logo.', null=True)),
                ('name', models.TextField(help_text='The name of the company.', null=True)),
                ('phone_number', models.TextField(help_text='A contact phone number for the company. For Motors Dealership please use the PhoneNumbers collection instead', null=True)),
                ('suburb', models.TextField(help_text='The suburb where the company HQ is located.', null=True)),
                ('website', models.TextField(help_text='The URL of the company website.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('e_mail', models.TextField(help_text='Gets the email of the dealer', null=True)),
                ('fax_number', models.TextField(help_text='Get the fax number of a contact', null=True)),
                ('full_name', models.TextField(help_text='Get the name of a contact', null=True)),
                ('home_phone_number', models.TextField(help_text='Get the home phone number of a contact', null=True)),
                ('mobile_phone_number', models.TextField(help_text='Get the mobile phone number of a contact', null=True)),
                ('office_phone_number', models.TextField(help_text='Get the office phone number of a contact', null=True)),
                ('photo', models.TextField(help_text='The Url to agents profile photo', null=True)),
                ('position', models.TextField(help_text='Get the position of a contact', null=True)),
                ('url_slug', models.TextField(help_text='The property agent profile url identifier used to know which agent profile to display', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.TextField(help_text='The name of the attribute, in a form suitable for displaying to users. Not required when selling or editing.', null=True)),
                ('display_value', models.TextField(help_text='The value of the attribute as it needs to be displayed to the end users', null=True)),
                ('name', models.TextField(help_text='A name which uniquely identifies the attribute. Required when selling or editing.', null=True)),
                ('value', models.TextField(help_text='The string value of the attribute. When listing, the valid values for the attribute can be determined using the “Retrieve attributes for a category” API. Use “false” or “true” for boolean attributes. Required when selling or editing.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Branding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background_color', models.TextField(help_text='Banner outline/stroke colour, tick the checkbox before saving to apply the new colour', null=True)),
                ('disable_banner', models.NullBooleanField(help_text='Disable the agent branding regardless of Super Feature status')),
                ('large_banner_url', models.TextField(help_text='The url of a larger version of the logo', null=True)),
                ('large_square_logo', models.TextField(help_text='A large square branding image with dimensions of 480×480.', null=True)),
                ('large_wide_logo', models.TextField(help_text='A large rectangular branding image with dimensions of 480×200.', null=True)),
                ('office_location', models.TextField(help_text='The name of the office location', null=True)),
                ('stroke_color', models.TextField(help_text='Banner text colour, tick the checkbox before saving to apply the new colour', null=True)),
                ('text_color', models.TextField(help_text='Banner background colour, tick the checkbox before saving to apply the new colour', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BroadbandTechnology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('availability', models.TextField(help_text='The availability of the broadband technology.', null=True)),
                ('completion', models.TextField(help_text='The estimated completion date of planned or underway connections.', null=True)),
                ('max_down', models.FloatField(help_text='The maxiumum download speed (in megabits per second).', null=True)),
                ('max_up', models.FloatField(help_text='The maximum upload speed (in megabits per second).', null=True)),
                ('min_down', models.FloatField(help_text='The minimum download speed (in megabits per second).', null=True)),
                ('min_up', models.FloatField(help_text='The minimup upload speed (in megabits per second).', null=True)),
                ('name', models.TextField(help_text='The technology name.')),
            ],
        ),
        migrations.CreateModel(
            name='EmbeddedContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matterport_key', models.TextField(help_text='The Matterport video key for the listing’s InsideView content.', null=True)),
                ('you_tube_video_key', models.TextField(help_text='The YouTube video key for the listing.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FlatmateInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_flatmates', models.TextField(help_text='A description of the current flatmates.', null=True)),
                ('flatmates', models.IntegerField(help_text='The number of current flatmates.')),
            ],
        ),
        migrations.CreateModel(
            name='GeographicLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.IntegerField(choices=[(0, 'None'), (1, 'Address'), (3, 'Street'), (2, 'Suburb')], help_text='The accuracy of the geographic location (address, street or suburb).', null=True)),
                ('latitude', models.FloatField(help_text='The latitude of the location, in degrees (WGS84).', null=True)),
                ('longitude', models.FloatField(help_text='The longitude of the location, in degrees (WGS84).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('listing_id', models.IntegerField(help_text='The ID of the listing.', primary_key=True, serialize=False)),
                ('listing_type', rentme.data.models._utils.EnumIntegerField(enum=rentme.data.models.listings.ListingType, help_text='Type of listing(property, flatmate, etc.)')),
                ('agency_reference', models.TextField(help_text='The reference to the agency.', null=True)),
                ('amenities', models.TextField(help_text='A list of the amenities in the area.', null=True)),
                ('as_at', models.DateTimeField(help_text='The date and time the response was generated on the server.')),
                ('available_from', models.TextField(help_text='The date the property is available from.', null=True)),
                ('bathrooms', models.IntegerField(help_text='The number of bedrooms in the property.', null=True)),
                ('bedrooms', models.IntegerField(help_text='The number of bathrooms in the property.', null=True)),
                ('best_contact_time', models.TextField(help_text='The best time to contact the seller.', null=True)),
                ('body', models.TextField(help_text='The text used as the body of the item.', null=True)),
                ('end_date', models.DateTimeField(help_text='The date the listing will end.', null=True)),
                ('ideal_tenant', models.TextField(help_text='A description of the ideal tenant (are they tidy, a professional couple, etc).', null=True)),
                ('max_tenants', models.IntegerField(help_text='The maximum number of tenents.', null=True)),
                ('parking', models.TextField(help_text='Information on the availability of parking.', null=True)),
                ('pets_okay', models.IntegerField(choices=[(0, 'NotSpecified'), (1, 'No'), (2, 'Yes'), (3, 'Negotiable')], help_text='Indicates whether pets are allowed by the landlord. This information is available for flatmates wanted and residential to rent listings.', null=True)),
                ('property_id', models.TextField(help_text='The property ID. This is different from the listing ID.', null=True)),
                ('property_type', models.TextField(help_text='The type of property. Currently valid values are: “Apartment”, “Bare land”, “Car Park”, “Development site”, “Dwelling”, “Hotel/Leisure”, “House”, “Industrial”, “Lifestyle block”, “Office”, “Retail”, “Section”, “Townhouse”, “Unit”, “Villa”.', null=True)),
                ('rent_per_week', models.FloatField(help_text='The rent payable per week, in NZD.', null=True)),
                ('smokers_okay', models.IntegerField(choices=[(0, 'NotSpecified'), (1, 'No'), (2, 'Yes')], help_text='Indicates whether smokers are allowed by the landlord. This information is available for flatmates wanted and residential to rent listings.', null=True)),
                ('start_date', models.DateTimeField(help_text='The date the listing was created.', null=True)),
                ('title', models.TextField(help_text='The listing title.', null=True)),
                ('whiteware', models.TextField(help_text='A description of what is included in the rent (if furnished).', null=True)),
                ('agency', models.ForeignKey(blank=True, help_text='The agency details if this is a job or property listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_agency', to='data.Agency')),
                ('attributes', models.ManyToManyField(help_text='The attributes for the item that are intended to be displayed on the UI.', related_name='listed_item_detail_reverse_attributes', to='data.Attribute')),
                ('broadband_technologies', models.ManyToManyField(help_text='A list of broadband technology availability for property listings.', related_name='listed_item_detail_reverse_broadband_technologies', to='data.BroadbandTechnology')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.Category')),
                ('embedded_content', models.ForeignKey(blank=True, help_text='The content keys that are embedded in the listing page (e.g. YouTube Video Key).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_embedded_content', to='data.EmbeddedContent')),
                ('flatmate_info', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.FlatmateInformation')),
                ('geographic_location', models.ForeignKey(blank=True, help_text='The geographic location (latitude and longitude) of a property.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_geographic_location', to='data.GeographicLocation')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('date_address_verified', models.DateTimeField(help_text='The date the member was address verified.', null=True)),
                ('date_joined', models.DateTimeField(help_text='The date the member joined.', null=True)),
                ('email', models.TextField(help_text='The member’s email address.', null=True)),
                ('feedback_count', models.IntegerField(help_text='The member’s total feedback (UniquePositive minus UniqueNegative).', null=True)),
                ('import_charges_may_apply', models.NullBooleanField(help_text='Indicates that the trader is an international seller, and therefore customs import charges may apply.')),
                ('is_address_verified', models.NullBooleanField(help_text='Indicates whether the member has been address verified.')),
                ('is_authenticated', models.NullBooleanField(help_text='Indicates whether the member is authenticated.')),
                ('is_dealer', models.NullBooleanField(help_text='Indicates whether the member is a car dealer.')),
                ('is_in_trade', models.NullBooleanField(help_text='Indicates whether the member is a professional trader.')),
                ('is_top_seller', models.NullBooleanField(help_text='Indicates whether the member is currently a Top Seller')),
                ('member_id', models.IntegerField(help_text='The ID of the member. This may be 0 , if we determine it is necessary to protect the member’s privacy.', primary_key=True, serialize=False)),
                ('nickname', models.TextField(help_text='The nickname of the member. Some characters may be changed, if we determine it is necessary to protect the member’s privacy.', null=True)),
                ('photo', models.TextField(help_text='The profile photo URL of the member', null=True)),
                ('region', models.TextField(help_text='The name of the member’s region.', null=True)),
                ('suburb', models.TextField(help_text='The name of the member’s suburb.', null=True)),
                ('unique_negative', models.IntegerField(help_text='The number of distinct members who have placed negative feedback against this member.', null=True)),
                ('unique_positive', models.IntegerField(help_text='The number of distinct members who have placed positive feedback against this member.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('photo_id', models.IntegerField(primary_key=True, serialize=False)),
                ('full_size', models.TextField(help_text='The URL for the full sized photo (scaled down to fit 670×502).', null=True)),
                ('gallery', models.TextField(help_text='The URL for the gallery sized photo (scaled down to fit 233×176).', null=True)),
                ('large', models.TextField(help_text='The URL for the large sized photo (scaled down to fit 352×264).', null=True)),
                ('list', models.TextField(help_text='The URL for the list view sized photo (scaled down to fit 160×120).', null=True)),
                ('medium', models.TextField(help_text='The URL for the medium sized photo (scaled down to fit 175×175).', null=True)),
                ('original_height', models.IntegerField(help_text='The original height of the photo.', null=True)),
                ('original_width', models.IntegerField(help_text='The original width of the photo.', null=True)),
                ('plus_size', models.TextField(help_text='The URL for the plus sized photo (scaled down to fit).', null=True)),
                ('thumbnail', models.TextField(help_text='The URL for the thumbnail sized photo (always 85×64, with white borders).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimpleMemberProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biography', models.TextField(help_text='The member’s bio.', null=True)),
                ('occupation', models.TextField(help_text='The occupation of the member.', null=True)),
                ('photo', models.TextField(help_text='A URL representing the member’s photo.', null=True)),
                ('quote', models.TextField(help_text='The member’s favourite quote.', null=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='simplememberprofile',
            unique_together=set([('biography', 'occupation', 'photo', 'quote')]),
        ),
        migrations.AlterUniqueTogether(
            name='photo',
            unique_together=set([('photo_id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together=set([('member_id',)]),
        ),
        migrations.AddField(
            model_name='listing',
            name='member',
            field=models.ForeignKey(blank=True, help_text='The seller of the listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_member', to='data.Member'),
        ),
        migrations.AddField(
            model_name='listing',
            name='member_profile',
            field=models.ForeignKey(blank=True, help_text='This listing member’s public profile information.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_member_profile', to='data.SimpleMemberProfile'),
        ),
        migrations.AddField(
            model_name='listing',
            name='photo',
            field=models.ForeignKey(help_text='A collection of photos for the listing.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data.Photo'),
        ),
        migrations.AddField(
            model_name='listing',
            name='photos',
            field=models.ManyToManyField(help_text='A collection of photos for the listing.', related_name='listings', to='data.Photo'),
        ),
        migrations.AddField(
            model_name='listing',
            name='suburb',
            field=models.ManyToManyField(help_text='The suburb where this item is located.', related_name='listings', to='data.Suburb'),
        ),
        migrations.AlterUniqueTogether(
            name='geographiclocation',
            unique_together=set([('accuracy', 'latitude', 'longitude')]),
        ),
        migrations.AlterUniqueTogether(
            name='embeddedcontent',
            unique_together=set([('matterport_key', 'you_tube_video_key')]),
        ),
        migrations.AlterUniqueTogether(
            name='broadbandtechnology',
            unique_together=set([('availability', 'completion', 'max_down', 'max_up', 'min_down', 'min_up', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='branding',
            unique_together=set([('background_color', 'disable_banner', 'large_banner_url', 'large_square_logo', 'large_wide_logo', 'office_location', 'stroke_color', 'text_color')]),
        ),
        migrations.AlterUniqueTogether(
            name='attribute',
            unique_together=set([('display_name', 'display_value', 'name', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='agent',
            unique_together=set([('e_mail', 'fax_number', 'full_name', 'home_phone_number', 'mobile_phone_number', 'office_phone_number', 'photo', 'position', 'url_slug')]),
        ),
        migrations.AddField(
            model_name='agency',
            name='agents',
            field=models.ManyToManyField(help_text='The contact details of contacts within the agency.', related_name='agency_reverse_agents', to='data.Agent'),
        ),
        migrations.AddField(
            model_name='agency',
            name='branding',
            field=models.ForeignKey(blank=True, help_text='The branding object for the company.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agency_reverse_branding', to='data.Branding'),
        ),
        migrations.AlterUniqueTogether(
            name='agency',
            unique_together=set([('id',)]),
        ),
    ]
