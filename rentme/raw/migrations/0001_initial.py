# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-13 07:53
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import rentme.data.models._utils
import api.trademe.enums


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address1', models.TextField(help_text='The first line of the address.', null=True)),
                ('address2', models.TextField(help_text='The second line of the address (optional).', null=True)),
                ('city', models.TextField(help_text='The city.', null=True)),
                ('country', models.TextField(help_text='The country (currently restricted to “New Zealand” or “Australia”).', null=True)),
                ('name', models.TextField(help_text='The name of the person whom the item is being delivered to.', null=True)),
                ('phone_number', models.TextField(help_text='The contact phone number (optional).', null=True)),
                ('postcode', models.TextField(help_text='The postcode (optional).', null=True)),
                ('suburb', models.TextField(help_text='The suburb (optional).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('address', models.TextField(help_text='The address of the company HQ.', null=True)),
                ('city', models.TextField(help_text='The city where the company HQ is located.', null=True)),
                ('e_mail', models.TextField(help_text='A contact email address for the company.', null=True)),
                ('fax_number', models.TextField(help_text='A fax number for the company.', null=True)),
                ('id', models.IntegerField(help_text='The ID of the company.', primary_key=True, serialize=False)),
                ('is_job_agency', models.NullBooleanField(help_text='Indicates whether the agency does job listings.')),
                ('is_licensed_property_agency', models.NullBooleanField(help_text='Indicates whether the agency is an REAA licensed property agency')),
                ('is_real_estate_agency', models.NullBooleanField(help_text='Indicates whether the agency does real estate.')),
                ('logo', models.TextField(help_text='A URL for the company logo.', null=True)),
                ('logo2', models.TextField(help_text='A URL for the second company logo.', null=True)),
                ('name', models.TextField(help_text='The name of the company.', null=True)),
                ('phone_number', models.TextField(help_text='A contact phone number for the company. For Motors Dealership please use the PhoneNumbers collection instead', null=True)),
                ('suburb', models.TextField(help_text='The suburb where the company HQ is located.', null=True)),
                ('website', models.TextField(help_text='The URL of the company website.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('e_mail', models.TextField(help_text='Gets the email of the dealer', null=True)),
                ('fax_number', models.TextField(help_text='Get the fax number of a contact', null=True)),
                ('full_name', models.TextField(help_text='Get the name of a contact', null=True)),
                ('home_phone_number', models.TextField(help_text='Get the home phone number of a contact', null=True)),
                ('mobile_phone_number', models.TextField(help_text='Get the mobile phone number of a contact', null=True)),
                ('office_phone_number', models.TextField(help_text='Get the office phone number of a contact', null=True)),
                ('photo', models.TextField(help_text='The Url to agents profile photo', null=True)),
                ('position', models.TextField(help_text='Get the position of a contact', null=True)),
                ('url_slug', models.TextField(help_text='The property agent profile url identifier used to know which agent profile to display', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.TextField(help_text='The name of the attribute, in a form suitable for displaying to users. Not required when selling or editing.', null=True)),
                ('display_value', models.TextField(help_text='The value of the attribute as it needs to be displayed to the end users', null=True)),
                ('is_required_for_sell', models.NullBooleanField(help_text='Indicates whether the attribute must be present when selling an item.')),
                ('name', models.TextField(help_text='A name which uniquely identifies the attribute. Required when selling or editing.', null=True)),
                ('type', models.IntegerField(choices=[(0, 'None'), (1, 'Boolean'), (2, 'Integer'), (3, 'Decimal'), (4, 'String'), (5, 'DateTime')], help_text='The type of the attribute, which determines the range of acceptable values. Not required when selling or editing.', null=True)),
                ('value', models.TextField(help_text='The string value of the attribute. When listing, the valid values for the attribute can be determined using the “Retrieve attributes for a category” API. Use “false” or “true” for boolean attributes. Required when selling or editing.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AttributeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(help_text='How many child elements are available.', null=True)),
                ('display', models.TextField(help_text='What should be displayed for this value (often the same).', null=True)),
                ('value', models.TextField(help_text='The value of the item as a string.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AttributeRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lower', models.TextField(help_text='The lowest allowed value of the attribute.', null=True)),
                ('upper', models.TextField(help_text='The highest allowed value of the attribute.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.TextField(help_text='The account the bid came from.', null=True)),
                ('bid_amount', models.FloatField(help_text='The amount of money the bid represents, in NZD.', null=True)),
                ('bid_date', models.DateTimeField(help_text='The date and time the bid was placed.', null=True)),
                ('is_buy_now', models.NullBooleanField(help_text='Indicates whether the bid was a Buy Now bid.')),
                ('is_by_mobile', models.NullBooleanField(help_text='Indicates whether the bid came from a mobile phone.')),
                ('is_by_proxy', models.NullBooleanField(help_text='Indicates whether the bid was by proxy.')),
            ],
        ),
        migrations.CreateModel(
            name='BidCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.IntegerField(help_text='The index of the current page of results (starts at 1).', null=True)),
                ('page_size', models.IntegerField(help_text='The number of results in the current page.', null=True)),
                ('total_count', models.IntegerField(help_text='The total number of results in the collection. Can be larger than the number of returned results.', null=True)),
                ('list', models.ManyToManyField(help_text='A list of the results in the current page.', related_name='bid_collection_reverse_list', to='raw.Bid')),
            ],
        ),
        migrations.CreateModel(
            name='Branding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background_color', models.TextField(help_text='Banner outline/stroke colour, tick the checkbox before saving to apply the new colour', null=True)),
                ('disable_banner', models.NullBooleanField(help_text='Disable the agent branding regardless of Super Feature status')),
                ('large_banner_url', models.TextField(help_text='The url of a larger version of the logo', null=True)),
                ('large_square_logo', models.TextField(help_text='A large square branding image with dimensions of 480×480.', null=True)),
                ('large_wide_logo', models.TextField(help_text='A large rectangular branding image with dimensions of 480×200.', null=True)),
                ('office_location', models.TextField(help_text='The name of the office location', null=True)),
                ('stroke_color', models.TextField(help_text='Banner text colour, tick the checkbox before saving to apply the new colour', null=True)),
                ('text_color', models.TextField(help_text='Banner background colour, tick the checkbox before saving to apply the new colour', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BroadbandTechnology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('availability', models.TextField(help_text='The availability of the broadband technology.', null=True)),
                ('completion', models.TextField(help_text='The estimated completion date of planned or underway connections.', null=True)),
                ('max_down', models.FloatField(help_text='The maxiumum download speed (in megabits per second).', null=True)),
                ('max_up', models.FloatField(help_text='The maximum upload speed (in megabits per second).', null=True)),
                ('min_down', models.FloatField(help_text='The minimum download speed (in megabits per second).', null=True)),
                ('min_up', models.FloatField(help_text='The minimup upload speed (in megabits per second).', null=True)),
                ('name', models.TextField(help_text='The technology name.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('area_of_business', rentme.data.models._utils.EnumIntegerField(enum=api.trademe.enums.AreaOfBusiness, help_text='Area of business this category is related to', null=True)),
                ('can_be_second_category', models.NullBooleanField(help_text='Indicates whether this category can be selected as a second category.')),
                ('can_have_second_category', models.NullBooleanField(help_text='Indicates whether this category can be paired with a second category.')),
                ('count', models.IntegerField(help_text='The number of items for sale in this category.', null=True)),
                ('has_classifieds', models.NullBooleanField(help_text='Indicates whether classifieds are allowed in this category.')),
                ('has_legal_notice', models.NullBooleanField(help_text='Indicates whether the category has legal requirements. You should ask the user to accept the legal notice before listing in this category. There is an API to get the text of the legal notice.')),
                ('is_restricted', models.NullBooleanField(help_text='Indicates whether the category is restricted to adults only (i.e. the category is R18).')),
                ('name', models.TextField(help_text='The name of the category.', null=True)),
                ('number', models.TextField(help_text='A unique identifier for the category e.g. “0004-0369-6076-“. We plan to change this to a numeric identifier (e.g. “6076”) so you should ensure you can cope with both formats.', primary_key=True, serialize=False)),
                ('path', models.TextField(help_text='The full URL path of this category e.g. “/Home-living/Beds-bedroom-furniture/Bedside-tables”.', null=True)),
                ('parent', models.ForeignKey(help_text='The list of subcategories belonging to this category.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='raw.Category')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Charity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charity_type', models.IntegerField(choices=[(1, 'ForestAndBird'), (2, 'Plunket')], help_text='The unique identifier of the charity.', null=True)),
                ('description', models.TextField(help_text='The name of the charity e.g. “Plunket”, “Kiwis for kiwi”.', null=True)),
                ('image_source', models.TextField(help_text='The url source location for this charity’s brand image.', null=True)),
                ('tagline', models.TextField(help_text='A short description of what the charity does.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContactDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('best_contact_time', models.TextField(help_text='The best time to contact the seller.', null=True)),
                ('contact_name', models.TextField(help_text='The name of the service provider.', null=True)),
                ('mobile_phone_number', models.TextField(help_text='The seller’s mobile phone number.', null=True)),
                ('phone_number', models.TextField(help_text='The seller’s contact phone number (landline).', null=True)),
                ('website', models.TextField(help_text='The service provider’s website.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CurrentShippingPromotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threshold', models.IntegerField(help_text='The threshold a buyer needs to reach to qualify for this promotional shipping offer.', null=True)),
                ('threshold_type', models.IntegerField(choices=[(1, 'Price'), (2, 'Item')], help_text='The type of threshold.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dealer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('e_mail', models.TextField(help_text='Gets the email of the dealer', null=True)),
                ('fax_number', models.TextField(help_text='Get the fax number of a contact', null=True)),
                ('full_name', models.TextField(help_text='Get the name of a contact', null=True)),
                ('home_phone_number', models.TextField(help_text='Get the home phone number of a contact', null=True)),
                ('mobile_phone_number', models.TextField(help_text='Get the mobile phone number of a contact', null=True)),
                ('office_phone_number', models.TextField(help_text='Get the office phone number of a contact', null=True)),
                ('position', models.TextField(help_text='Get the position of a contact', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dealership',
            fields=[
                ('about_us', models.TextField(help_text='Description of the Dealership', null=True)),
                ('address', models.TextField(help_text='The address of the company HQ.', null=True)),
                ('city', models.TextField(help_text='The city where the company HQ is located.', null=True)),
                ('e_mail', models.TextField(help_text='A contact email address for the company.', null=True)),
                ('fax_number', models.TextField(help_text='A fax number for the company.', null=True)),
                ('id', models.IntegerField(help_text='The ID of the company.', primary_key=True, serialize=False)),
                ('logo', models.TextField(help_text='A URL for the company logo.', null=True)),
                ('logo2', models.TextField(help_text='A URL for the second company logo.', null=True)),
                ('name', models.TextField(help_text='The name of the company.', null=True)),
                ('phone_number', models.TextField(help_text='A contact phone number for the company. For Motors Dealership please use the PhoneNumbers collection instead', null=True)),
                ('suburb', models.TextField(help_text='The suburb where the company HQ is located.', null=True)),
                ('website', models.TextField(help_text='The URL of the company website.', null=True)),
                ('branding', models.ForeignKey(blank=True, help_text='The branding object for the company.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dealership_reverse_branding', to='raw.Branding')),
                ('dealers', models.ManyToManyField(help_text='Gets the contact details of contacts within the dealership', related_name='dealership_reverse_dealers', to='raw.Dealer')),
            ],
        ),
        migrations.CreateModel(
            name='DealershipListingCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bikes', models.IntegerField(help_text='Count of motorbike listings', null=True)),
                ('boats', models.IntegerField(help_text='Count of motorboat listings', null=True)),
                ('cars', models.IntegerField(help_text='Count of car listings', null=True)),
                ('total', models.IntegerField(help_text='Total of listings', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DealershipPhoneNumbers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DealerShowroom',
            fields=[
                ('background_colour', models.TextField(help_text='Background colour of the Showroom banner / logo', null=True)),
                ('banner', models.TextField(help_text='Banner of the Showroom', null=True)),
                ('id', models.IntegerField(help_text='ID of the Showroom', primary_key=True, serialize=False)),
                ('logo', models.TextField(help_text='Logo of the Showroom', null=True)),
                ('url', models.TextField(help_text='Url of the Showroom', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('district_id', models.IntegerField(help_text='The ID of the district.', primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='The name of the district.', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmbeddedContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matterport_key', models.TextField(help_text='The Matterport video key for the listing’s InsideView content.', null=True)),
                ('you_tube_video_key', models.TextField(help_text='The YouTube video key for the listing.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FixedPriceOfferDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_expiry_date', models.DateTimeField(help_text='The date and time the fixed price offer expires.', null=True)),
                ('offer_price', models.FloatField(help_text='The offer price of the item on offer. For offers with more than one available item, this is the price per item. The price for shipping is not included.', null=True)),
                ('quantity', models.IntegerField(help_text='The number of items that are available. Buyers are able to purchase one or more of this item until the stock runs out or the offer ends.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FixedPriceOfferRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision', models.IntegerField(choices=[(0, 'NoDecision'), (1, 'Declined'), (2, 'Accepted')], help_text='The response of the member to the offer.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Flatmate',
            fields=[
                ('address', models.TextField(help_text='The address to display.', null=True)),
                ('agency_reference', models.TextField(help_text='The reference to the agency.', null=True)),
                ('amenities', models.TextField(help_text='A list of the amenities in the area.', null=True)),
                ('area', models.IntegerField(help_text='The area of the house, in square metres.', null=True)),
                ('area_range_max', models.IntegerField(help_text='The maximum area of the house, in square metres.', null=True)),
                ('as_at', models.DateTimeField(help_text='The date and time the response was generated on the server.', null=True)),
                ('available_from', models.TextField(help_text='The date the property is available from.', null=True)),
                ('bathrooms', models.IntegerField(help_text='The number of bedrooms in the property.', null=True)),
                ('bedrooms', models.IntegerField(help_text='The number of bathrooms in the property.', null=True)),
                ('best_contact_time', models.TextField(help_text='The best time to contact the seller.', null=True)),
                ('bid_count', models.IntegerField(help_text='The number of bids on the item.', null=True)),
                ('buy_now_price', models.FloatField(help_text='The Buy Now price.', null=True)),
                ('category', models.TextField(help_text='The listing category.', null=True)),
                ('category_path', models.TextField(help_text='The category path.', null=True)),
                ('current_flatmates', models.TextField(help_text='A description of the current flatmates.', null=True)),
                ('district', models.TextField(help_text='The name of the district the property is located in.', null=True)),
                ('district_id', models.IntegerField(help_text='The ID of the district where this property is located.', null=True)),
                ('end_date', models.DateTimeField(help_text='The date the listing will end.', null=True)),
                ('flatmates', models.IntegerField(help_text='The number of current flatmates.', null=True)),
                ('has_buy_now', models.NullBooleanField(help_text='Indicates whether the item has Buy Now.')),
                ('has_embedded_video', models.NullBooleanField(help_text='Indicates whether the listing has an embedded video')),
                ('has_free_shipping', models.NullBooleanField(help_text='Indicates if the listing offers free shipping as an option')),
                ('has_gallery', models.NullBooleanField(help_text='Is this a gallery listing?')),
                ('has_home_page_feature', models.NullBooleanField(help_text='Is this a homepage feature listing?')),
                ('has_pay_now', models.NullBooleanField(help_text='Indicates whether the item has Pay Now.')),
                ('has_reserve', models.NullBooleanField(help_text='Indicates whether the item has a reserve.')),
                ('ideal_tenant', models.TextField(help_text='A description of the ideal tenant (are they tidy, a professional couple, etc).', null=True)),
                ('is_bold', models.NullBooleanField(help_text='Is this a bold listing?')),
                ('is_boosted', models.NullBooleanField(help_text='If the listing has been boosted or not')),
                ('is_buy_now_only', models.NullBooleanField(help_text='Indicates whether or not this is a Buy Now Only listing.')),
                ('is_classified', models.NullBooleanField(help_text='Indicates whether the item is a classified.')),
                ('is_clearance', models.NullBooleanField(help_text='This indicates that the listing is a clearance item. Clearance listings include listings with was/now pricing and general clearance stock.')),
                ('is_featured', models.NullBooleanField(help_text='Is this a featured listing?')),
                ('is_highlighted', models.NullBooleanField(help_text='Is this a highlighted listing?')),
                ('is_new', models.NullBooleanField(help_text='Indicates whether the item is marked as new.')),
                ('is_on_watch_list', models.NullBooleanField(help_text='Indicates whether the item is on the authenticated member’s watchlist.')),
                ('is_reserve_met', models.NullBooleanField(help_text='Indicates whether the item’s reserve has been met.')),
                ('is_super_featured', models.NullBooleanField(help_text='Is this a super featured listing?')),
                ('land_area', models.IntegerField(help_text='The area of the land, in square metres.', null=True)),
                ('listing_group', models.TextField(help_text='The listing group.', null=True)),
                ('listing_id', models.IntegerField(help_text='The ID of the listing.', primary_key=True, serialize=False)),
                ('max_bid_amount', models.FloatField(help_text='The current leading bid amount.', null=True)),
                ('max_tenants', models.IntegerField(help_text='The maximum number of tenents.', null=True)),
                ('note_date', models.DateTimeField(help_text='The date of the note on an item.', null=True)),
                ('parking', models.TextField(help_text='Information on the availability of parking.', null=True)),
                ('percentage_off', models.IntegerField(help_text='The percentage that a product has been discounted. This has been rounded for display purposes. This field will only be populated if IsClearance is true .', null=True)),
                ('pets_okay', models.IntegerField(choices=[(0, 'NotSpecified'), (1, 'No'), (2, 'Yes'), (3, 'Negotiable')], help_text='Indicates whether pets are allowed by the landlord. This information is available for flatmates wanted and residential to rent listings.', null=True)),
                ('picture_href', models.TextField(help_text='The URL of the primary photo for the listing (if the listing has a photo). By default you’ll get a thumbnail-sized photo, but you can control the size of the photo using the photo_size parameter.', null=True)),
                ('positive_review_count', models.IntegerField(help_text='The number of user-submitted reviews which are positive (i.e. the user selected the thumbs up graphic when submitting a review). Currently only applies to services listings.', null=True)),
                ('price_display', models.TextField(help_text='The price, in a format suitable for displaying to the user. Some categories may have special pricing rules, e.g. properties may have “Price by negotiation”.', null=True)),
                ('promotion_id', models.IntegerField(help_text='The ID of the promotion applied to this listing.', null=True)),
                ('property_id', models.TextField(help_text='The property ID. This is different from the listing ID.', null=True)),
                ('property_type', models.TextField(help_text='The type of property. Currently valid values are: “Apartment”, “Bare land”, “Car Park”, “Development site”, “Dwelling”, “Hotel/Leisure”, “House”, “Industrial”, “Lifestyle block”, “Office”, “Retail”, “Section”, “Townhouse”, “Unit”, “Villa”.', null=True)),
                ('rateable_value', models.IntegerField(help_text='The rateable value of the property.', null=True)),
                ('region', models.TextField(help_text='The name of the region where this item is located.', null=True)),
                ('region_id', models.IntegerField(help_text='The ID of the region where this item is located. In the general search, listing details and watchlist APIs this is the ID of the seller’s region (using the two-tier region/suburb system), which means it might be inconsistent with the region name. In the property search API this is the ID of the property region, using the three-tier region/district/suburb system. This field cannot cope with the two main geographical classification systems. Except for the property search API, it should not be used.', null=True)),
                ('remaining_gallery_plus_relists', models.IntegerField(help_text='The number of times the item can be relisted and get the gallery promotion for free. This value is only present if you are the seller and the listing had the gallery promotion applied due to the gallery plus promotion. Note that for this field, a value of zero is not the same as if the field is missing (a value of zero means gallery plus is in effect whereas if the field is missing it means that you are not the seller or gallery plus is not in effect).', null=True)),
                ('rent_per_week', models.FloatField(help_text='The rent payable per week, in NZD.', null=True)),
                ('reserve_state', models.IntegerField(choices=[(0, 'None'), (1, 'Met'), (2, 'NotMet'), (3, 'NotApplicable')], help_text='The flag to display on an item.', null=True)),
                ('short_description', models.TextField(help_text='Short description of a listing. This is Jobs and Services specfic.', null=True)),
                ('smokers_okay', models.IntegerField(choices=[(0, 'NotSpecified'), (1, 'No'), (2, 'Yes')], help_text='Indicates whether smokers are allowed by the landlord. This information is available for flatmates wanted and residential to rent listings.', null=True)),
                ('start_date', models.DateTimeField(help_text='The date the listing was created.', null=True)),
                ('start_price', models.FloatField(help_text='The start price.', null=True)),
                ('subtitle', models.TextField(help_text='The subtitle, if present.', null=True)),
                ('suburb', models.TextField(help_text='The name of the suburb where this item is located.', null=True)),
                ('suburb_id', models.IntegerField(help_text='The ID of the suburb where this item is located. Only populated by the property search API, which means it uses the three-tier region/district/suburb system.', null=True)),
                ('title', models.TextField(help_text='The listing title.', null=True)),
                ('total_review_count', models.IntegerField(help_text='The total number of user-submitted reviews. Currently only applies to services listings.', null=True)),
                ('viewing_instructions', models.TextField(help_text='Instructions on how to view the property.', null=True)),
                ('was_price', models.FloatField(help_text='The usual price that a product is sold at, or the price before it was marked down. This is always more than the Buy Now price. This field will only be populated if IsClearance is true .', null=True)),
                ('whiteware', models.TextField(help_text='A description of what is included in the rent (if furnished).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FlatmateAdjacentSuburbIds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FlatmateAdjacentSuburbNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FlatmatePhotoUrls',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Flatmates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('did_you_mean', models.TextField(help_text='The suggestion string, if the search produced no results and there is a popular search term that is lexigraphically close to the search string.', null=True)),
                ('favourite_id', models.IntegerField(help_text='The ID of a favourite search that corresponds to the current search, if the call is authenticated and the authenticated member has a favourite search that matches.', null=True)),
                ('favourite_type', models.IntegerField(choices=[(0, 'None'), (1, 'Category'), (3, 'Search'), (4, 'AttributeSearch'), (6, 'Seller')], help_text='The type of favourite (e.g. “Category”, “Search”, “Seller”) that the FavouriteId property refers to. Only applicable for searches that match one of the authenticated user’s favourites.', null=True)),
                ('page', models.IntegerField(help_text='The index of the current page of results (starts at 1).', null=True)),
                ('page_size', models.IntegerField(help_text='The number of results in the current page.', null=True)),
                ('total_count', models.IntegerField(help_text='The total number of results in the collection. Can be larger than the number of returned results.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoundCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.TextField(help_text='The category identifier string in the form nnnn- (e.g. “0344-3357-6420-“).', null=True)),
                ('category_id', models.IntegerField(help_text='The category id (e.g. 6420).', null=True)),
                ('count', models.IntegerField(help_text='The number of results that were found in this category.', null=True)),
                ('is_restricted', models.NullBooleanField(help_text='True if the category is restricted. All R18 categories are restricted by default.')),
                ('name', models.TextField(help_text='The name of the category (e.g. “Blackberry”).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeographicLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.IntegerField(choices=[(0, 'None'), (1, 'Address'), (3, 'Street'), (2, 'Suburb')], help_text='The accuracy of the geographic location (address, street or suburb).', null=True)),
                ('easting', models.IntegerField(help_text='The easting of the location, in metres (NZTM).', null=True)),
                ('latitude', models.FloatField(help_text='The latitude of the location, in degrees (WGS84).', null=True)),
                ('longitude', models.FloatField(help_text='The longitude of the location, in degrees (WGS84).', null=True)),
                ('northing', models.IntegerField(help_text='The northing of the location, in metres (NZTM).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LargeBannerImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('large', models.TextField(help_text='The URL of the promotional image in large size 1024×576.', null=True)),
                ('medium', models.TextField(help_text='The URL of the promotional image in medium size 768×432.', null=True)),
                ('small', models.TextField(help_text='The URL of the promotional image in small size 320×180', null=True)),
                ('x_large', models.TextField(help_text='The URL of the promotional image in extra large size 1440×810.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ListedItemDetail',
            fields=[
                ('allows_pickups', models.IntegerField(choices=[(0, 'None'), (1, 'Allow'), (2, 'Demand'), (3, 'Forbid')], help_text='Indicates whether the seller allows pickup.', null=True)),
                ('as_at', models.DateTimeField(help_text='The date and time the response was generated on the server.', null=True)),
                ('authenticated_members_only', models.NullBooleanField(help_text='Indicates whether bidding on this auction is restricted to authenticated members. Note that there are many restrictions on non-authenticated users. For more information, see the help article on becoming authenticated .')),
                ('available_to_buy', models.TextField(help_text='The amount of listings available for purchase. If greater than 10, 10+ will be displayed.', null=True)),
                ('bid_count', models.IntegerField(help_text='The number of bids on the item.', null=True)),
                ('bidder_and_watchers', models.IntegerField(help_text='The number of bidders and watcher for this listing.', null=True)),
                ('body', models.TextField(help_text='The text used as the body of the item.', null=True)),
                ('buy_now_price', models.FloatField(help_text='The Buy Now price.', null=True)),
                ('can_add_to_cart', models.NullBooleanField(help_text='Indicates if the item can be added to members cart.')),
                ('can_offer', models.NullBooleanField(help_text='Indicates whether a fixed price offer can be created for the listing. You can use this flag to hide the FPO button in your UI or to avoid a useless FPO API call. Note that if this flag is true it does not guarantee that a subsequent FPO operation will succeed.')),
                ('can_relist', models.NullBooleanField(help_text='Indicates whether the listing can be relisted using the relist or relist with edits API. You can use this flag to hide the relist button in your UI or to avoid a useless relist API call. Note that if this flag is true it does not guarantee that a subsequent relist operation will succeed.')),
                ('can_use_pay_now_instant', models.NullBooleanField(help_text='Indicates whether the PayNowInstant is available for this listing.')),
                ('cart_item_id', models.IntegerField(help_text='the cartItemId if the item is already in the members cart.', null=True)),
                ('category', models.TextField(help_text='The listing category.', null=True)),
                ('category_name', models.TextField(help_text='The display name of the category.', null=True)),
                ('category_path', models.TextField(help_text='The category path.', null=True)),
                ('contact_count', models.IntegerField(help_text='The number of contacts received for this listing, either emails, applications, or clicks-to-apply. Only available if you are the seller.', null=True)),
                ('current_auto_bid', models.FloatField(help_text='If you are the bidder then the highest AutoBid value is returned', null=True)),
                ('end_date', models.DateTimeField(help_text='The date the listing will end.', null=True)),
                ('external_reference_id', models.TextField(help_text='The external reference ID, if one exists. Only available to the seller of a listing.', null=True)),
                ('firearms_license_required_to_buy', models.NullBooleanField(help_text='Indicates whether a buyer is required to enter their firearms license number. Applies to firearms listings (e.g. Sports > Hunting & shooting > Rifles).')),
                ('formatted_start_date', models.TextField(help_text='Listing start date, displayed as a string. Currently applies to Motors Classified listings only.', null=True)),
                ('has_buy_now', models.NullBooleanField(help_text='Indicates whether the item has Buy Now.')),
                ('has_contact_details', models.NullBooleanField(help_text='Indicates whether the listing has contact details')),
                ('has_gallery', models.NullBooleanField(help_text='Is this a gallery listing?')),
                ('has_home_page_feature', models.NullBooleanField(help_text='Is this a homepage feature listing?')),
                ('has_multiple', models.NullBooleanField(help_text='Indicates whether there is more than one item available. Only applicable for Buy Now Only listings.')),
                ('has_pay_now', models.NullBooleanField(help_text='Indicates whether the item has Pay Now.')),
                ('has_reserve', models.NullBooleanField(help_text='Indicates whether the item has a reserve.')),
                ('is_bold', models.NullBooleanField(help_text='Is this a bold listing?')),
                ('is_buy_now_only', models.NullBooleanField(help_text='Indicates whether or not this is a Buy Now Only listing.')),
                ('is_classified', models.NullBooleanField(help_text='Indicates whether the item is a classified.')),
                ('is_clearance', models.NullBooleanField(help_text='This indicates that the listing is a clearance item. Clearance listings include listings with was/now pricing and general clearance stock.')),
                ('is_eligible_for_bidding', models.NullBooleanField(help_text='Indicates whether afterpay is an eligible payment method for Buy Now')),
                ('is_eligible_for_buy_now', models.NullBooleanField(help_text='Indicates whether afterpay is an eligible payment method for Buy Now')),
                ('is_eligible_for_buyer_protection', models.NullBooleanField(help_text='Indicates whether the listing is eligible for buyer protection')),
                ('is_featured', models.NullBooleanField(help_text='Is this a featured listing?')),
                ('is_flat_shipping_charge', models.NullBooleanField(help_text='Indicates whether one flat shipping fee will be charged if more than one of this item is purchased. Only applicable for Buy Now Only listings.')),
                ('is_highlighted', models.NullBooleanField(help_text='Is this a highlighted listing?')),
                ('is_in_cart', models.NullBooleanField(help_text='Indicates if the item is also in the members cart.')),
                ('is_in_trade_protected', models.NullBooleanField(help_text='Indicates whether the listing is protected by the Consumer Guarantees Act')),
                ('is_leading', models.NullBooleanField(help_text='Indicates whether the authenticated user is leading the bidding.')),
                ('is_new', models.NullBooleanField(help_text='Indicates whether the item is marked as new.')),
                ('is_on_watch_list', models.NullBooleanField(help_text='Indicates whether the item is on the authenticated member’s watchlist.')),
                ('is_or_near_offer', models.NullBooleanField(help_text='Indicates whether a near offer is accepted.')),
                ('is_outbid', models.NullBooleanField(help_text='Indicates whether the authenticated user has been outbid. This will be false if the authenticated user has not made any bids.')),
                ('is_reserve_met', models.NullBooleanField(help_text='Indicates whether the item’s reserve has been met.')),
                ('is_super_featured', models.NullBooleanField(help_text='Is this a super featured listing?')),
                ('listing_id', models.IntegerField(help_text='The ID of the listing.', primary_key=True, serialize=False)),
                ('max_bid_amount', models.FloatField(help_text='The current leading bid amount.', null=True)),
                ('minimum_next_bid_amount', models.FloatField(help_text='The smallest amount that will be accepted for the next bid. Only applicable to auctions which allow bidding (i.e. not classifieds and not Buy Now Only auctions). You must still check for the “bid too small” error when using this value, as someone may make a bid after you have checked this value but before you have finished placing your bid.', null=True)),
                ('note_date', models.DateTimeField(help_text='The date of the note on an item.', null=True)),
                ('number_of_payments', models.IntegerField(help_text='Indicates the number of payments', null=True)),
                ('offer_status', models.IntegerField(choices=[(0, 'None'), (1, 'Active'), (2, 'Withdrawn'), (3, 'Expired'), (4, 'Declined'), (5, 'Accepted')], help_text='The status of the fixed price offer for this listing (if there is one). Only available if you are the seller or a recipient of the offer.', null=True)),
                ('over18_declaration_required_to_buy', models.NullBooleanField(help_text='Indicates whether a buyer is required to confirm that they are over 18. Applies to wine listings (e.g. Home & living > Wine > Red > Pinot noir).')),
                ('payment_amount', models.FloatField(help_text='The total amount of this payment', null=True)),
                ('payment_interval', models.TextField(help_text='Indicates the payment interval, eg. Fortnightly', null=True)),
                ('payment_method_fee', models.FloatField(help_text='The fee amount paid as part of this payment', null=True)),
                ('payment_options', models.TextField(help_text='A comma-separated list of the available payment options e.g. “NZ Bank Deposit, Cash, Pay Now”.', null=True)),
                ('percentage_off', models.IntegerField(help_text='The percentage that a product has been discounted. This has been rounded for display purposes. This field will only be populated if IsClearance is true .', null=True)),
                ('photo_id', models.IntegerField(help_text='The ID of the primary photo for the listing (if the listing has a photo).', null=True)),
                ('positive_review_count', models.IntegerField(help_text='The number of user-submitted reviews which are positive (i.e. the user selected the thumbs up graphic when submitting a review). Currently only applies to services listings.', null=True)),
                ('price_display', models.TextField(help_text='The price, in a format suitable for displaying to the user. Some categories may have special pricing rules, e.g. properties may have “Price by negotiation”.', null=True)),
                ('quantity', models.IntegerField(help_text='The total quantity available of the item. Only applicable for Buy Now Only listings. When retrieving won items this value represents the number sold, not the total quantity. When retrieving sold items, this value is not present (use QuantitySold instead). When retrieving listing details, this value is only present if you are the seller.', null=True)),
                ('region', models.TextField(help_text='The name of the region where this item is located.', null=True)),
                ('region_id', models.IntegerField(help_text='The ID of the region where this item is located. In the general search, listing details and watchlist APIs this is the ID of the seller’s region (using the two-tier region/suburb system), which means it might be inconsistent with the region name. In the property search API this is the ID of the property region, using the three-tier region/district/suburb system. This field cannot cope with the two main geographical classification systems. Except for the property search API, it should not be used.', null=True)),
                ('relisted_item_id', models.IntegerField(help_text='The ID of the new listing if this listing was relisted.', null=True)),
                ('remaining_gallery_plus_relists', models.IntegerField(help_text='The number of times the item can be relisted and get the gallery promotion for free. This value is only present if you are the seller and the listing had the gallery promotion applied due to the gallery plus promotion. Note that for this field, a value of zero is not the same as if the field is missing (a value of zero means gallery plus is in effect whereas if the field is missing it means that you are not the seller or gallery plus is not in effect).', null=True)),
                ('reserve_price', models.FloatField(help_text='The reserve price for the auction. This is available in the sold/unsold items APIs and, if you are the seller, the listing details API.', null=True)),
                ('reserve_state', models.IntegerField(choices=[(0, 'None'), (1, 'Met'), (2, 'NotMet'), (3, 'NotApplicable')], help_text='The flag to display on an item.', null=True)),
                ('sku', models.TextField(help_text='SKU or Stock Keeping Unit. Used to uniquely identify an auction’s product line.', null=True)),
                ('send_payment_instructions', models.NullBooleanField(help_text='Indicates whether payment instructions are automatically sent to buyers. This value is only present if you are the seller.')),
                ('start_date', models.DateTimeField(help_text='The date the listing was created.', null=True)),
                ('start_price', models.FloatField(help_text='The start price.', null=True)),
                ('subtitle', models.TextField(help_text='The subtitle, if present.', null=True)),
                ('suburb', models.TextField(help_text='The name of the suburb where this item is located.', null=True)),
                ('suburb_id', models.IntegerField(help_text='The ID of the suburb where this item is located. Only populated by the property search API, which means it uses the three-tier region/district/suburb system.', null=True)),
                ('super_feature_end_date', models.DateTimeField(help_text='End date of a super feature for a listing.', null=True)),
                ('supports_questions_and_answers', models.NullBooleanField(help_text='Indicates if questions and answers can be shown on the listing')),
                ('title', models.TextField(help_text='The listing title.', null=True)),
                ('total_review_count', models.IntegerField(help_text='The total number of user-submitted reviews. Currently only applies to services listings.', null=True)),
                ('unanswered_question_count', models.IntegerField(help_text='The number of unanswered questions for this listing.', null=True)),
                ('view_count', models.IntegerField(help_text='The number of times the listing has been viewed.', null=True)),
                ('was_price', models.FloatField(help_text='The usual price that a product is sold at, or the price before it was marked down. This is always more than the Buy Now price. This field will only be populated if IsClearance is true .', null=True)),
                ('withdrawn_by_seller', models.NullBooleanField(help_text='Indicates whether the listing was withdrawn by the seller.')),
                ('agency', models.ForeignKey(blank=True, help_text='The agency details if this is a job or property listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_agency', to='raw.Agency')),
                ('attributes', models.ManyToManyField(help_text='The attributes for the item that are intended to be displayed on the UI.', related_name='listed_item_detail_reverse_attributes', to='raw.Attribute')),
                ('bids', models.ForeignKey(blank=True, help_text='A list of the last 10 bids for the listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_bids', to='raw.BidCollection')),
                ('branding', models.ForeignKey(blank=True, help_text='A list of branding images associated with this listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_branding', to='raw.Branding')),
                ('broadband_technologies', models.ManyToManyField(help_text='A list of broadband technology availability for property listings.', related_name='listed_item_detail_reverse_broadband_technologies', to='raw.BroadbandTechnology')),
                ('closed_offer', models.ForeignKey(blank=True, help_text='Contains details of a fixed price offer that was made, but is no longer available, either because it was accepted, it expired or all recipients declined the offer. Only available if you are the seller or a recipient of the offer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_closed_offer', to='raw.FixedPriceOfferDetails')),
                ('contact_details', models.ForeignKey(blank=True, help_text='The contact details for a personal listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_contact_details', to='raw.ContactDetails')),
                ('current_shipping_promotion', models.ForeignKey(blank=True, help_text='A list of shipping promotions that are currently active for this listing', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_current_shipping_promotion', to='raw.CurrentShippingPromotion')),
                ('dealership', models.ForeignKey(blank=True, help_text='The dealership details if this is a car dealer listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_dealership', to='raw.Dealership')),
                ('donation_recipient', models.ForeignKey(blank=True, help_text='Indicates the seller will round up their success fees to the nearest dollar and donate the difference to the selected charity.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_donation_recipient', to='raw.Charity')),
                ('embedded_content', models.ForeignKey(blank=True, help_text='The content keys that are embedded in the listing page (e.g. YouTube Video Key).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_embedded_content', to='raw.EmbeddedContent')),
                ('geographic_location', models.ForeignKey(blank=True, help_text='The geographic location (latitude and longitude) of a property.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_geographic_location', to='raw.GeographicLocation')),
                ('hidden_attributes', models.ManyToManyField(help_text='The attributes for the item that are not intended to be displayed on the UI.', related_name='listed_item_detail_reverse_hidden_attributes', to='raw.Attribute')),
            ],
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('locality_id', models.IntegerField(help_text='The ID of the region.', primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='The name of the region.', null=True)),
                ('districts', models.ManyToManyField(help_text='The list of districts that belong to this region.', related_name='localities', to='raw.District')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('date_address_verified', models.DateTimeField(help_text='The date the member was address verified.', null=True)),
                ('date_joined', models.DateTimeField(help_text='The date the member joined.', null=True)),
                ('email', models.TextField(help_text='The member’s email address.', null=True)),
                ('feedback_count', models.IntegerField(help_text='The member’s total feedback (UniquePositive minus UniqueNegative).', null=True)),
                ('import_charges_may_apply', models.NullBooleanField(help_text='Indicates that the trader is an international seller, and therefore customs import charges may apply.')),
                ('is_address_verified', models.NullBooleanField(help_text='Indicates whether the member has been address verified.')),
                ('is_authenticated', models.NullBooleanField(help_text='Indicates whether the member is authenticated.')),
                ('is_dealer', models.NullBooleanField(help_text='Indicates whether the member is a car dealer.')),
                ('is_in_trade', models.NullBooleanField(help_text='Indicates whether the member is a professional trader.')),
                ('is_top_seller', models.NullBooleanField(help_text='Indicates whether the member is currently a Top Seller')),
                ('member_id', models.IntegerField(help_text='The ID of the member. This may be 0 , if we determine it is necessary to protect the member’s privacy.', primary_key=True, serialize=False)),
                ('nickname', models.TextField(help_text='The nickname of the member. Some characters may be changed, if we determine it is necessary to protect the member’s privacy.', null=True)),
                ('photo', models.TextField(help_text='The profile photo URL of the member', null=True)),
                ('region', models.TextField(help_text='The name of the member’s region.', null=True)),
                ('suburb', models.TextField(help_text='The name of the member’s suburb.', null=True)),
                ('unique_negative', models.IntegerField(help_text='The number of distinct members who have placed negative feedback against this member.', null=True)),
                ('unique_positive', models.IntegerField(help_text='The number of distinct members who have placed positive feedback against this member.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MemberProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biography', models.TextField(help_text='The member’s bio.', null=True)),
                ('date_removed', models.DateTimeField(help_text='The date the member was disabled (assuming it has been disabled).', null=True)),
                ('favourite_id', models.IntegerField(help_text='The ID of a favourite seller, if the call is authenticated and this member is a favourite seller for the authenticated caller.', null=True)),
                ('first_name', models.TextField(help_text='The first name of the member.', null=True)),
                ('is_enabled', models.NullBooleanField(help_text='Indicates whether the member account is enabled.')),
                ('occupation', models.TextField(help_text='The occupation of the member.', null=True)),
                ('photo', models.TextField(help_text='A URL representing the member’s photo.', null=True)),
                ('quote', models.TextField(help_text='The member’s favourite quote.', null=True)),
                ('member', models.ForeignKey(blank=True, help_text='Basic information about the member.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_profile_reverse_member', to='raw.Member')),
            ],
        ),
        migrations.CreateModel(
            name='MemberRequestInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_offer_status', models.IntegerField(choices=[(0, 'MemberCanRequest'), (1, 'SoldAlready'), (2, 'MemberIsBlacklisted'), (3, 'RequestAlreadyMade'), (4, 'OfferAlreadyMade'), (5, 'RelistedAlready'), (6, 'MemberIsNotAValidOfferee')], help_text='Indicates whether the member can request an offer and the status of any request.', null=True)),
                ('request_relist_status', models.IntegerField(choices=[(0, 'MemberCanRequest'), (1, 'SoldAlready'), (2, 'MemberIsBlacklisted'), (3, 'RequestAlreadyMade'), (4, 'OfferAlreadyMade'), (5, 'RelistedAlready'), (6, 'MemberIsNotAValidOfferee')], help_text='Indicates whether the member can request a relist and the status of any request.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MembershipDistrict',
            fields=[
                ('district_id', models.IntegerField(help_text='The ID of the district.', primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='The name of the district.', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MembershipLocality',
            fields=[
                ('locality_id', models.IntegerField(help_text='The ID of the region.', primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='The name of the region.', null=True)),
                ('districts', models.ManyToManyField(help_text='The list of districts that belong to this region.', related_name='localities', to='raw.MembershipDistrict')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MotorWebBasicReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('damaged', models.TextField(help_text='Returns “YES” if the car was reported to be damaged during the import. Returns “NO” if the car was not reported to be damaged during the import. Returns “N/A” if value cannot be reliably read from the database.', null=True)),
                ('generated_at', models.DateTimeField(help_text='Returns the time stamp of the date and time when report has been generated.', null=True)),
                ('money_owing', models.TextField(help_text='Returns “YES” if a person or company has registered a security against the vehicle indicating they have a financial interest in the vehicle Returns “NO” if a person or company has not registered a security against the vehicle indicating they have a financial interest in the vehicle. Returns “N/A” if value cannot be reliably read from the database.', null=True)),
                ('partial_report_url', models.TextField(help_text='Returns the URL to the partial MotorWebReport', null=True)),
                ('rego_or_vin', models.TextField(help_text='Returns the registration or VIN number which has been used to purchase the Motor Web Basic Report.', null=True)),
                ('reported_stolen', models.TextField(help_text='Returns “YES” if the car was reported to be stolen. Returns “NO” if the car was not reported to be stolen. Returns “N/A” if value cannot be reliably read from the database.', null=True)),
                ('title', models.TextField(help_text='Returns the vehicle title', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OpenHome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end', models.DateTimeField(help_text='The date and time the open home is no longer open for viewing. Must be the same day as Start .', null=True)),
                ('start', models.DateTimeField(help_text='The date and time the open home is open for viewing. The date must be in the future and it must be less than 56 days from the current date. Specify dates in the UTC time zone.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='The name used to identify the group of option values, e.g. “size” or “colour”. This name must match an entry in the option set collection.', null=True)),
                ('value', models.TextField(help_text='The choice that this variant has for the option, e.g. “red”, “blue”. This name must match an entry in the option set.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OptionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='The name used to identify the group of option values, e.g. “size” or “colour”.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OptionSetValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('photo_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='PhotoUrl',
            fields=[
                ('full_size', models.TextField(help_text='The URL for the full sized photo (scaled down to fit 670×502).', null=True)),
                ('gallery', models.TextField(help_text='The URL for the gallery sized photo (scaled down to fit 233×176).', null=True)),
                ('large', models.TextField(help_text='The URL for the large sized photo (scaled down to fit 352×264).', null=True)),
                ('list', models.TextField(help_text='The URL for the list view sized photo (scaled down to fit 160×120).', null=True)),
                ('medium', models.TextField(help_text='The URL for the medium sized photo (scaled down to fit 175×175).', null=True)),
                ('original_height', models.IntegerField(help_text='The original height of the photo.', null=True)),
                ('original_width', models.IntegerField(help_text='The original width of the photo.', null=True)),
                ('photo_id', models.IntegerField(help_text='The ID of the photo.', primary_key=True, serialize=False)),
                ('plus_size', models.TextField(help_text='The URL for the plus sized photo (scaled down to fit).', null=True)),
                ('thumbnail', models.TextField(help_text='The URL for the thumbnail sized photo (always 85×64, with white borders).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('did_you_mean', models.TextField(help_text='The suggestion string, if the search produced no results and there is a popular search term that is lexigraphically close to the search string.', null=True)),
                ('favourite_id', models.IntegerField(help_text='The ID of a favourite search that corresponds to the current search, if the call is authenticated and the authenticated member has a favourite search that matches.', null=True)),
                ('favourite_type', models.IntegerField(choices=[(0, 'None'), (1, 'Category'), (3, 'Search'), (4, 'AttributeSearch'), (6, 'Seller')], help_text='The type of favourite (e.g. “Category”, “Search”, “Seller”) that the FavouriteId property refers to. Only applicable for searches that match one of the authenticated user’s favourites.', null=True)),
                ('page', models.IntegerField(help_text='The index of the current page of results (starts at 1).', null=True)),
                ('page_size', models.IntegerField(help_text='The number of results in the current page.', null=True)),
                ('total_count', models.IntegerField(help_text='The total number of results in the collection. Can be larger than the number of returned results.', null=True)),
                ('found_categories', models.ManyToManyField(help_text='A collection of suggested categories and the number of search results in each category.', related_name='properties_reverse_found_categories', to='raw.FoundCategory')),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('address', models.TextField(help_text='The address to display.', null=True)),
                ('agency_reference', models.TextField(help_text='The reference to the agency.', null=True)),
                ('amenities', models.TextField(help_text='A list of the amenities in the area.', null=True)),
                ('area', models.IntegerField(help_text='The area of the house, in square metres.', null=True)),
                ('area_range_max', models.IntegerField(help_text='The maximum area of the house, in square metres.', null=True)),
                ('as_at', models.DateTimeField(help_text='The date and time the response was generated on the server.', null=True)),
                ('available_from', models.TextField(help_text='The date the property is available from.', null=True)),
                ('bathrooms', models.IntegerField(help_text='The number of bedrooms in the property.', null=True)),
                ('bedrooms', models.IntegerField(help_text='The number of bathrooms in the property.', null=True)),
                ('best_contact_time', models.TextField(help_text='The best time to contact the seller.', null=True)),
                ('bid_count', models.IntegerField(help_text='The number of bids on the item.', null=True)),
                ('buy_now_price', models.FloatField(help_text='The Buy Now price.', null=True)),
                ('category', models.TextField(help_text='The listing category.', null=True)),
                ('category_path', models.TextField(help_text='The category path.', null=True)),
                ('district', models.TextField(help_text='The name of the district the property is located in.', null=True)),
                ('district_id', models.IntegerField(help_text='The ID of the district where this property is located.', null=True)),
                ('end_date', models.DateTimeField(help_text='The date the listing will end.', null=True)),
                ('has_buy_now', models.NullBooleanField(help_text='Indicates whether the item has Buy Now.')),
                ('has_embedded_video', models.NullBooleanField(help_text='Indicates whether the listing has an embedded video')),
                ('has_free_shipping', models.NullBooleanField(help_text='Indicates if the listing offers free shipping as an option')),
                ('has_gallery', models.NullBooleanField(help_text='Is this a gallery listing?')),
                ('has_home_page_feature', models.NullBooleanField(help_text='Is this a homepage feature listing?')),
                ('has_pay_now', models.NullBooleanField(help_text='Indicates whether the item has Pay Now.')),
                ('has_reserve', models.NullBooleanField(help_text='Indicates whether the item has a reserve.')),
                ('ideal_tenant', models.TextField(help_text='A description of the ideal tenant (are they tidy, a professional couple, etc).', null=True)),
                ('is_bold', models.NullBooleanField(help_text='Is this a bold listing?')),
                ('is_boosted', models.NullBooleanField(help_text='If the listing has been boosted or not')),
                ('is_buy_now_only', models.NullBooleanField(help_text='Indicates whether or not this is a Buy Now Only listing.')),
                ('is_classified', models.NullBooleanField(help_text='Indicates whether the item is a classified.')),
                ('is_clearance', models.NullBooleanField(help_text='This indicates that the listing is a clearance item. Clearance listings include listings with was/now pricing and general clearance stock.')),
                ('is_featured', models.NullBooleanField(help_text='Is this a featured listing?')),
                ('is_highlighted', models.NullBooleanField(help_text='Is this a highlighted listing?')),
                ('is_new', models.NullBooleanField(help_text='Indicates whether the item is marked as new.')),
                ('is_on_watch_list', models.NullBooleanField(help_text='Indicates whether the item is on the authenticated member’s watchlist.')),
                ('is_reserve_met', models.NullBooleanField(help_text='Indicates whether the item’s reserve has been met.')),
                ('is_super_featured', models.NullBooleanField(help_text='Is this a super featured listing?')),
                ('land_area', models.IntegerField(help_text='The area of the land, in square metres.', null=True)),
                ('listing_group', models.TextField(help_text='The listing group.', null=True)),
                ('listing_id', models.IntegerField(help_text='The ID of the listing.', null=True)),
                ('max_bid_amount', models.FloatField(help_text='The current leading bid amount.', null=True)),
                ('max_tenants', models.IntegerField(help_text='The maximum number of tenents.', null=True)),
                ('note_date', models.DateTimeField(help_text='The date of the note on an item.', null=True)),
                ('parking', models.TextField(help_text='Information on the availability of parking.', null=True)),
                ('percentage_off', models.IntegerField(help_text='The percentage that a product has been discounted. This has been rounded for display purposes. This field will only be populated if IsClearance is true .', null=True)),
                ('pets_okay', models.IntegerField(choices=[(0, 'NotSpecified'), (1, 'No'), (2, 'Yes'), (3, 'Negotiable')], help_text='Indicates whether pets are allowed by the landlord. This information is available for flatmates wanted and residential to rent listings.', null=True)),
                ('picture_href', models.TextField(help_text='The URL of the primary photo for the listing (if the listing has a photo). By default you’ll get a thumbnail-sized photo, but you can control the size of the photo using the photo_size parameter.', null=True)),
                ('positive_review_count', models.IntegerField(help_text='The number of user-submitted reviews which are positive (i.e. the user selected the thumbs up graphic when submitting a review). Currently only applies to services listings.', null=True)),
                ('price_display', models.TextField(help_text='The price, in a format suitable for displaying to the user. Some categories may have special pricing rules, e.g. properties may have “Price by negotiation”.', null=True)),
                ('promotion_id', models.IntegerField(help_text='The ID of the promotion applied to this listing.', null=True)),
                ('property_id', models.TextField(help_text='The property ID. This is different from the listing ID.', primary_key=True, serialize=False)),
                ('property_type', models.TextField(help_text='The type of property. Currently valid values are: “Apartment”, “Bare land”, “Car Park”, “Development site”, “Dwelling”, “Hotel/Leisure”, “House”, “Industrial”, “Lifestyle block”, “Office”, “Retail”, “Section”, “Townhouse”, “Unit”, “Villa”.', null=True)),
                ('rateable_value', models.IntegerField(help_text='The rateable value of the property.', null=True)),
                ('region', models.TextField(help_text='The name of the region where this item is located.', null=True)),
                ('region_id', models.IntegerField(help_text='The ID of the region where this item is located. In the general search, listing details and watchlist APIs this is the ID of the seller’s region (using the two-tier region/suburb system), which means it might be inconsistent with the region name. In the property search API this is the ID of the property region, using the three-tier region/district/suburb system. This field cannot cope with the two main geographical classification systems. Except for the property search API, it should not be used.', null=True)),
                ('remaining_gallery_plus_relists', models.IntegerField(help_text='The number of times the item can be relisted and get the gallery promotion for free. This value is only present if you are the seller and the listing had the gallery promotion applied due to the gallery plus promotion. Note that for this field, a value of zero is not the same as if the field is missing (a value of zero means gallery plus is in effect whereas if the field is missing it means that you are not the seller or gallery plus is not in effect).', null=True)),
                ('rent_per_week', models.FloatField(help_text='The rent payable per week, in NZD.', null=True)),
                ('reserve_state', models.IntegerField(choices=[(0, 'None'), (1, 'Met'), (2, 'NotMet'), (3, 'NotApplicable')], help_text='The flag to display on an item.', null=True)),
                ('short_description', models.TextField(help_text='Short description of a listing. This is Jobs and Services specfic.', null=True)),
                ('smokers_okay', models.IntegerField(choices=[(0, 'NotSpecified'), (1, 'No'), (2, 'Yes')], help_text='Indicates whether smokers are allowed by the landlord. This information is available for flatmates wanted and residential to rent listings.', null=True)),
                ('start_date', models.DateTimeField(help_text='The date the listing was created.', null=True)),
                ('start_price', models.FloatField(help_text='The start price.', null=True)),
                ('subtitle', models.TextField(help_text='The subtitle, if present.', null=True)),
                ('suburb', models.TextField(help_text='The name of the suburb where this item is located.', null=True)),
                ('suburb_id', models.IntegerField(help_text='The ID of the suburb where this item is located. Only populated by the property search API, which means it uses the three-tier region/district/suburb system.', null=True)),
                ('title', models.TextField(help_text='The listing title.', null=True)),
                ('total_review_count', models.IntegerField(help_text='The total number of user-submitted reviews. Currently only applies to services listings.', null=True)),
                ('viewing_instructions', models.TextField(help_text='Instructions on how to view the property.', null=True)),
                ('was_price', models.FloatField(help_text='The usual price that a product is sold at, or the price before it was marked down. This is always more than the Buy Now price. This field will only be populated if IsClearance is true .', null=True)),
                ('whiteware', models.TextField(help_text='A description of what is included in the rent (if furnished).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyAdjacentSuburbIds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyAdjacentSuburbNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyPhotoUrls',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField(help_text='The answer given to the question by the owner of the listing.', null=True)),
                ('answer_date', models.DateTimeField(help_text='The date the question was answered.', null=True)),
                ('comment', models.TextField(help_text='The text of the question.', null=True)),
                ('comment_date', models.DateTimeField(help_text='The date and time the question was asked.', null=True)),
                ('is_seller_comment', models.NullBooleanField(help_text='Indicates whether this is a comment from the seller rather than a question.')),
                ('listing_id', models.IntegerField(help_text='The ID of the listing this question belongs to.', null=True)),
                ('listing_question_id', models.IntegerField(help_text='The question ID.', null=True)),
                ('asking_member', models.ForeignKey(blank=True, help_text='The member details for the member asking the question.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_reverse_asking_member', to='raw.Member')),
            ],
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.IntegerField(help_text='The index of the current page of results (starts at 1).', null=True)),
                ('page_size', models.IntegerField(help_text='The number of results in the current page.', null=True)),
                ('total_count', models.IntegerField(help_text='The total number of results in the collection. Can be larger than the number of returned results.', null=True)),
                ('list', models.ManyToManyField(help_text='A list of the results in the current page.', related_name='questions_reverse_list', to='raw.Question')),
            ],
        ),
        migrations.CreateModel(
            name='RefundDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(help_text='The amount refunded', null=True)),
                ('destination', models.TextField(help_text='The destination the refund was sent to.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_card_last_four_digits', models.TextField(help_text='The last four digits of the credit card used to pay for the item. Only available if Pay Now was used to make the purchase and you are logged in as the buyer.', null=True)),
                ('credit_card_payment_date', models.DateTimeField(help_text='The date and time a payment was made with a credit card using Pay Now. Only valid if HasPaidByCreditCard is true .', null=True)),
                ('credit_card_type', models.TextField(help_text='The type of credit card that was used to pay for the item (“Visa”, “MasterCard”, etc). Only available if Pay Now was used to make the purchase and you are logged in as the buyer.', null=True)),
                ('delivery_details_sent', models.NullBooleanField(help_text='Indicates whether delivery details (i.e. the delivery address, phone number and message) have been sent to the seller. Because all three elements are optional, this can be true even if the DeliveryAddress and MessageFromBuyer fields are missing.')),
                ('has_buyer_placed_feedback', models.NullBooleanField(help_text='Indicates whether the buyer has placed feedback on the seller for this sale.')),
                ('has_paid_by_credit_card', models.NullBooleanField(help_text='Indicates whether the buyer has purchased the item using Pay Now. For high risk payments, the value will be false until the payment has been manually approved by the Trade Me customer service team.')),
                ('has_seller_placed_feedback', models.NullBooleanField(help_text='Indicates whether the seller has placed feedback on the buyer for this sale.')),
                ('is_payment_pending', models.NullBooleanField(help_text='Indicates whether a Pay Now payment is currently under review by the Trade Me customer service team. If this flag is set, you should not send payment reminder notices to the buyer. Note: the Trade Me website uses the label “Payment Held” for payments in this state.')),
                ('message_from_buyer', models.TextField(help_text='The message from the buyer to the seller, if any.', null=True)),
                ('method', models.IntegerField(choices=[(0, 'Auction'), (1, 'BuyNow'), (2, 'Offer')], help_text='The method by which the sale was made.', null=True)),
                ('order_id', models.IntegerField(help_text='If the item was purchased via the shopping cart, then this is an ID that uniquely identifies the shopping cart transaction. All of the items that were ordered in the same cart transaction will have the same ID.', null=True)),
                ('payment_instructions', models.TextField(help_text='The payment instructions that the seller has sent to the buyer, containing information on how to pay. Will be absent if the seller has not enabled payment instructions, or if the seller has not yet sent them to the buyer.', null=True)),
                ('price', models.FloatField(help_text='The price the item was sold for, excluding shipping. If the purchase was for multiple items, this is the price of a single item.', null=True)),
                ('purchase_id', models.IntegerField(help_text='A unique identifier for the sale.', null=True)),
                ('quantity_sold', models.IntegerField(help_text='The quantity sold.', null=True)),
                ('reference_number', models.TextField(help_text='The reference number that should be used when making a deposit into the seller’s bank account.', null=True)),
                ('selected_shipping', models.TextField(help_text='A description of the selected shipping method (e.g. “Nationwide courier”).', null=True)),
                ('shipping_price', models.FloatField(help_text='The price of shipping.', null=True)),
                ('shipping_type', models.IntegerField(choices=[(0, 'None'), (1, 'Undecided'), (2, 'Pickup'), (3, 'Free'), (4, 'Custom'), (5, 'TradeMe')], help_text='The type of shipping that was selected.', null=True)),
                ('sold_date', models.DateTimeField(help_text='The date and time the item was sold.', null=True)),
                ('status', models.IntegerField(choices=[(10, 'EmailSent'), (20, 'PaymentReceived'), (30, 'GoodsShipped'), (40, 'SaleCompleted')], help_text='The status of the sale. This can be set by the seller to track the status of an order; it is never set by Trade Me. Only available if you are the seller of the listing.', null=True)),
                ('status_date', models.DateTimeField(help_text='The date the status was last changed. Only available to the seller.', null=True)),
                ('subtotal_price', models.FloatField(help_text='The price for all items, excluding shipping (i.e. equal to SalePrice * QuantitySold).', null=True)),
                ('total_sale_price', models.FloatField(help_text='The total price for the entire sale, including shipping. If the purchase was for multiple items, all items are included in this price.', null=True)),
                ('total_shipping_price', models.FloatField(help_text='The total price for shipping. If flat shipping is not enabled, equal to ShippingPrice * QuantitySold.', null=True)),
                ('buyer', models.ForeignKey(blank=True, help_text='The member who bought the item. Not available if you are the buyer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sale_reverse_buyer', to='raw.Member')),
                ('delivery_address', models.ForeignKey(blank=True, help_text='The delivery address as indicated by the buyer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sale_reverse_delivery_address', to='raw.Address')),
            ],
        ),
        migrations.CreateModel(
            name='SearchParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allows_multiple_values', models.NullBooleanField(help_text='Indicates the user is allowed to select multiple values. Each value should be comma-separated. Currently applies only to String parameters.')),
                ('dependent_on', models.TextField(help_text='If present, the Name (not the DisplayName) of another parameter. If the user is filtering by that other parameter, then this filter becomes available for use. The parameter that is referenced will be a single-valued (non-ranged).', null=True)),
                ('display_name', models.TextField(help_text='The name of the search parameter, in a form suitable for displaying to the user.', null=True)),
                ('external_options_key', models.TextField(help_text='If present, indicates that the list of options is not immediately available, but can be retrieved from the SearchOptions API endpoint. The value is the key that should be passed to the SearchOptions API. Either the list of options is really long, or the list is dependent on the value of another parameter (see the DependentOn field).', null=True)),
                ('lower_bound_name', models.TextField(help_text='If the parameter is a ranged parameter, this is the name of the parameter to use to specify the lower bound.', null=True)),
                ('mutual_exclusion_group', models.TextField(help_text='If present, indicates this parameter is part of a group of parameters which are all mutually exclusive. The group name can be used as a heading name.', null=True)),
                ('name', models.TextField(help_text='The name of the search parameter.', null=True)),
                ('type', models.IntegerField(choices=[(0, 'Boolean'), (1, 'Numeric'), (2, 'String'), (3, 'PropertyRegionId'), (4, 'PropertyDistrictId'), (5, 'PropertySuburbId'), (6, 'Location')], help_text='Indicates the type of the parameter value.', null=True)),
                ('upper_bound_name', models.TextField(help_text='If the parameter is a ranged parameter, this is the name of the parameter to use to specify the upper bound.', null=True)),
                ('dependent_parameter', models.ForeignKey(blank=True, help_text='Dependent parameter to display cascading structure', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='search_parameter_reverse_dependent_parameter', to='raw.SearchParameter')),
                ('options', models.ManyToManyField(help_text='A list of options to display to the user.', related_name='search_parameter_reverse_options', to='raw.AttributeOption')),
            ],
        ),
        migrations.CreateModel(
            name='ShippingOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.TextField(help_text='The name of the delivery method (e.g. “NZ Courier”, “Rural Delivery”). Only applicable if ShippingType is Custom.', null=True)),
                ('price', models.FloatField(help_text='The price of the delivery option. Only applicable if ShippingType is Custom. Rounded up to the nearest 2 decimal places.', null=True)),
                ('shipping_id', models.IntegerField(help_text='The ID of the shipping option (used when bidding or for Buy Now). Not required when listing an item.', null=True)),
                ('type', models.IntegerField(choices=[(0, 'None'), (1, 'Undecided'), (2, 'Pickup'), (3, 'Free'), (4, 'Custom'), (5, 'TradeMe')], help_text='The type of delivery.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimpleMemberProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biography', models.TextField(help_text='The member’s bio.', null=True)),
                ('occupation', models.TextField(help_text='The occupation of the member.', null=True)),
                ('photo', models.TextField(help_text='A URL representing the member’s photo.', null=True)),
                ('quote', models.TextField(help_text='The member’s favourite quote.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SponsorLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField(help_text='The url to link to', null=True)),
                ('name', models.TextField(help_text='The name of the sponsor, westpac, GE, TMI etc', null=True)),
                ('type', models.IntegerField(choices=[(0, 'None'), (1, 'BusinessPartner'), (2, 'Checklist')], help_text='The type of sponsor link, business partner/checklist', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_image_uri', models.TextField(help_text='The URL of a banner image. Stores extra banner images are 960×120. Store banner images are 633×75. When requesting listing details, only stores extra listings have a banner image.', null=True)),
                ('location', models.TextField(help_text='The location for this store', null=True)),
                ('logo_image_uri', models.TextField(help_text='The URL of a small logo image (180×52).', null=True)),
                ('name', models.TextField(help_text='The name of the store.', null=True)),
                ('phone_number', models.TextField(help_text='The phone number for this store', null=True)),
                ('short_description', models.TextField(help_text='A short description of what the store sells. Only returned when browsing the stores list.', null=True)),
                ('store_path', models.TextField(help_text='A url friendly path for the store, that is unique.', null=True)),
                ('website', models.TextField(help_text='The website for this store', null=True)),
                ('large_banner_image', models.ForeignKey(blank=True, help_text='The URL’s of a large banner image for each breakpoint, small, medium, large, extra large. When requesting listing details, only stores extra listings have a large banner image.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='store_reverse_large_banner_image', to='raw.LargeBannerImage')),
            ],
        ),
        migrations.CreateModel(
            name='StorePromotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_uri', models.TextField(help_text='The URL of the promotional image 760×240.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Suburb',
            fields=[
                ('name', models.TextField(help_text='The name of the suburb.', null=True)),
                ('suburb_id', models.IntegerField(help_text='The ID of the suburb.', primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SuburbAdjacentSuburbs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_clearance', models.NullBooleanField(help_text='This indicates that the listing is a clearance item. Clearance listings include listings with was/now pricing and general clearance stock.')),
                ('listing_id', models.IntegerField(help_text='The identifier of the listing that this variant represents.', null=True)),
                ('price', models.FloatField(help_text='The Buy Now price of the variant. Must be a minimum of 50c.', null=True)),
                ('quantity', models.IntegerField(help_text='This is the quantity of items that are available for sale. Can be between 1 and 1000. Note that when editing, the value must be less than or equal to 1000 – (quantity sold). The quantity sold for a listing can be calculated by adding up all the QuantitySold values from the listing details response.', null=True)),
                ('sku', models.TextField(help_text='SKU or Stock Keeping Unit. Used to uniquely identify an auction’s product line. Maximum of 50 characters.', null=True)),
                ('was_price', models.FloatField(help_text='The Was price of the variant. Must be a minimum of 50c.', null=True)),
                ('attributes', models.ManyToManyField(help_text='A collection of dynamic attrbutes that relate to this variant specifically e.g. GTIN or MPC', related_name='variant_reverse_attributes', to='raw.Attribute')),
                ('options', models.ManyToManyField(help_text='The combination of variant options that this variant represents.', related_name='variant_reverse_options', to='raw.Option')),
                ('photos', models.ManyToManyField(help_text='A collection of photo URLs for the listing. Ignored when creating or editing a listing.', related_name='variant_reverse_photos', to='raw.Photo')),
            ],
        ),
        migrations.CreateModel(
            name='VariantDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_sets', models.ManyToManyField(help_text='A collection of variant options.', related_name='variant_definition_reverse_option_sets', to='raw.OptionSet')),
                ('variants', models.ManyToManyField(help_text='A collection of variants.', related_name='variant_definition_reverse_variants', to='raw.Variant')),
            ],
        ),
        migrations.CreateModel(
            name='VariantDefinitionSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_discounted', models.NullBooleanField(help_text='Whether or not the variants are all discounted.')),
                ('all_on_clearance', models.NullBooleanField(help_text='Whether or not the variants are all on clearance.')),
                ('discount_percent', models.IntegerField(help_text='The discount percentage of all the variants, if they are all the same.', null=True)),
                ('discount_percent_high', models.IntegerField(help_text='The highest discount percentage of all the variants, if there is a discount percentage range.', null=True)),
                ('discount_percent_low', models.IntegerField(help_text='The lowest discount percentage of all the variants, if there is a discount percentage range.', null=True)),
                ('has_discount_percent_range', models.NullBooleanField(help_text='Whether or not the variants have a single discount percentage or a discount percentage range.')),
                ('has_price_range', models.NullBooleanField(help_text='Whether or not the variants have a single price or a price range.')),
                ('price', models.FloatField(help_text='The price of all the variants, if they are all the same.', null=True)),
                ('price_high', models.FloatField(help_text='The highest price of all the variants, if there is a price range.', null=True)),
                ('price_low', models.FloatField(help_text='The lowest price of all the variants, if there is a price range.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ViewingTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewing_id', models.IntegerField()),
                ('viewing_time', models.DateTimeField()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='viewingtime',
            unique_together=set([('viewing_id', 'viewing_time')]),
        ),
        migrations.AlterUniqueTogether(
            name='variantdefinitionsummary',
            unique_together=set([('all_discounted', 'all_on_clearance', 'discount_percent', 'discount_percent_high', 'discount_percent_low', 'has_discount_percent_range', 'has_price_range', 'price', 'price_high', 'price_low')]),
        ),
        migrations.AlterUniqueTogether(
            name='suburbadjacentsuburbs',
            unique_together=set([('value',)]),
        ),
        migrations.AddField(
            model_name='suburb',
            name='adjacent_suburbs',
            field=models.ManyToManyField(help_text='A list containing the IDs of the suburbs adjacent to this suburb.', related_name='suburb_reverse_adjacent_suburbs', to='raw.SuburbAdjacentSuburbs'),
        ),
        migrations.AlterUniqueTogether(
            name='storepromotion',
            unique_together=set([('image_uri',)]),
        ),
        migrations.AddField(
            model_name='store',
            name='promotions',
            field=models.ManyToManyField(help_text='A collection of promotional images. Only applies to stores extra.', related_name='store_reverse_promotions', to='raw.StorePromotion'),
        ),
        migrations.AlterUniqueTogether(
            name='sponsorlink',
            unique_together=set([('link', 'name', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='simplememberprofile',
            unique_together=set([('biography', 'occupation', 'photo', 'quote')]),
        ),
        migrations.AlterUniqueTogether(
            name='shippingoption',
            unique_together=set([('method', 'price', 'shipping_id', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='refunddetails',
            unique_together=set([('amount', 'destination')]),
        ),
        migrations.AlterUniqueTogether(
            name='propertyphotourls',
            unique_together=set([('value',)]),
        ),
        migrations.AlterUniqueTogether(
            name='propertyadjacentsuburbnames',
            unique_together=set([('value',)]),
        ),
        migrations.AlterUniqueTogether(
            name='propertyadjacentsuburbids',
            unique_together=set([('value',)]),
        ),
        migrations.AddField(
            model_name='property',
            name='adjacent_suburb_ids',
            field=models.ManyToManyField(help_text='The IDs of any adjacent suburbs.', related_name='property_reverse_adjacent_suburb_ids', to='raw.PropertyAdjacentSuburbIds'),
        ),
        migrations.AddField(
            model_name='property',
            name='adjacent_suburb_names',
            field=models.ManyToManyField(help_text='The names of any adjacent suburbs.', related_name='property_reverse_adjacent_suburb_names', to='raw.PropertyAdjacentSuburbNames'),
        ),
        migrations.AddField(
            model_name='property',
            name='agency',
            field=models.ForeignKey(blank=True, help_text='Details of the agency this property was listed by.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='property_reverse_agency', to='raw.Agency'),
        ),
        migrations.AddField(
            model_name='property',
            name='branding',
            field=models.ForeignKey(blank=True, help_text='A list of branding images associated with this listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='property_reverse_branding', to='raw.Branding'),
        ),
        migrations.AddField(
            model_name='property',
            name='geographic_location',
            field=models.ForeignKey(blank=True, help_text='The geographic location (latitude and longitude) of a property.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='property_reverse_geographic_location', to='raw.GeographicLocation'),
        ),
        migrations.AddField(
            model_name='property',
            name='open_homes',
            field=models.ManyToManyField(help_text='A collection of open home times for this listing. Only applies to open home listings.', related_name='property_reverse_open_homes', to='raw.OpenHome'),
        ),
        migrations.AddField(
            model_name='property',
            name='photo_urls',
            field=models.ManyToManyField(help_text='A collection of photo urls for the listing', related_name='property_reverse_photo_urls', to='raw.PropertyPhotoUrls'),
        ),
        migrations.AddField(
            model_name='property',
            name='variant_definition_summary',
            field=models.ForeignKey(blank=True, help_text='A summary of the variant information.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='property_reverse_variant_definition_summary', to='raw.VariantDefinitionSummary'),
        ),
        migrations.AddField(
            model_name='properties',
            name='list',
            field=models.ManyToManyField(help_text='A list of the results in the current page.', related_name='properties_reverse_list', to='raw.Property'),
        ),
        migrations.AddField(
            model_name='properties',
            name='member_profile',
            field=models.ForeignKey(blank=True, help_text='Details of the member that is being filtered on. Not returned unless member_listing is non-zero and return_metadata is true.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties_reverse_member_profile', to='raw.MemberProfile'),
        ),
        migrations.AddField(
            model_name='properties',
            name='parameters',
            field=models.ManyToManyField(help_text='A list of search parameters which are applicable to the searched category. Not returned unless return_metadata is true.', related_name='properties_reverse_parameters', to='raw.SearchParameter'),
        ),
        migrations.AddField(
            model_name='properties',
            name='sort_orders',
            field=models.ManyToManyField(help_text='A list of sort orders which are applicable to the searched category. Not returned unless return_metadata is true.', related_name='properties_reverse_sort_orders', to='raw.AttributeOption'),
        ),
        migrations.AddField(
            model_name='properties',
            name='super_features',
            field=models.ManyToManyField(help_text='A randomised collection of super features matching the current search', related_name='properties_reverse_super_features', to='raw.Property'),
        ),
        migrations.AlterUniqueTogether(
            name='photourl',
            unique_together=set([('photo_id',)]),
        ),
        migrations.AddField(
            model_name='photo',
            name='value',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photo_reverse_value', to='raw.PhotoUrl'),
        ),
        migrations.AlterUniqueTogether(
            name='optionsetvalues',
            unique_together=set([('value',)]),
        ),
        migrations.AddField(
            model_name='optionset',
            name='values',
            field=models.ManyToManyField(help_text='The choices available for this option set, e.g. “red”, “blue”. The sequence in which values are supplied is reflected in the sequence of user-interface elements on listings.', related_name='option_set_reverse_values', to='raw.OptionSetValues'),
        ),
        migrations.AlterUniqueTogether(
            name='option',
            unique_together=set([('name', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='openhome',
            unique_together=set([('end', 'start')]),
        ),
        migrations.AlterUniqueTogether(
            name='motorwebbasicreport',
            unique_together=set([('damaged', 'generated_at', 'money_owing', 'partial_report_url', 'rego_or_vin', 'reported_stolen', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='memberrequestinformation',
            unique_together=set([('request_offer_status', 'request_relist_status')]),
        ),
        migrations.AddField(
            model_name='memberprofile',
            name='store',
            field=models.ForeignKey(blank=True, help_text='Store details, if the seller has been set up as a Trade Me store.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_profile_reverse_store', to='raw.Store'),
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together=set([('member_id',)]),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='member',
            field=models.ForeignKey(blank=True, help_text='The seller of the listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_member', to='raw.Member'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='member_profile',
            field=models.ForeignKey(blank=True, help_text='This listing member’s public profile information.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_member_profile', to='raw.SimpleMemberProfile'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='member_request_information',
            field=models.ForeignKey(blank=True, help_text='Provides information relating to the member regarding their ability to request a relist or offer and the status of any request.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_member_request_information', to='raw.MemberRequestInformation'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='motor_web_basic_report',
            field=models.ForeignKey(blank=True, help_text='MotorWeb basic report for car listings if purchased by the seller.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_motor_web_basic_report', to='raw.MotorWebBasicReport'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='open_homes',
            field=models.ManyToManyField(help_text='A collection of open home times for this listing. Only applies to open home listings.', related_name='listed_item_detail_reverse_open_homes', to='raw.OpenHome'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='pending_offer',
            field=models.ForeignKey(blank=True, help_text='Contains details of a fixed price offer that is pending for this auction. Only available if you are the seller or a recipient of the offer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_pending_offer', to='raw.FixedPriceOfferDetails'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='photos',
            field=models.ManyToManyField(help_text='A collection of photos for the listing.', related_name='listed_item_detail_reverse_photos', to='raw.Photo'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='questions',
            field=models.ForeignKey(blank=True, help_text='A list of questions and answers for the listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_questions', to='raw.Questions'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='refund_collection',
            field=models.ManyToManyField(help_text='A collection of refunds that have been made against this payment', related_name='listed_item_detail_reverse_refund_collection', to='raw.RefundDetails'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='sales',
            field=models.ManyToManyField(help_text='Contains sales information for the listing. A “sale” in this context can via Buy Now, a fixed price offer or a winning bid. If you are the seller of this listing, this field contains information on all sales. If you are the buyer, then it contains information about your purchases only.', related_name='listed_item_detail_reverse_sales', to='raw.Sale'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='shipping_options',
            field=models.ManyToManyField(help_text='A list of shipping options.', related_name='listed_item_detail_reverse_shipping_options', to='raw.ShippingOption'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='sponsor_links',
            field=models.ManyToManyField(help_text='A collection of sponsored links for the listing.', related_name='listed_item_detail_reverse_sponsor_links', to='raw.SponsorLink'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='store',
            field=models.ForeignKey(blank=True, help_text='The store details, if the seller has a Trade Me store.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_store', to='raw.Store'),
        ),
        migrations.AddField(
            model_name='listeditemdetail',
            name='variant_definition',
            field=models.ForeignKey(blank=True, help_text='The variants.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='listed_item_detail_reverse_variant_definition', to='raw.VariantDefinition'),
        ),
        migrations.AlterUniqueTogether(
            name='largebannerimage',
            unique_together=set([('large', 'medium', 'small', 'x_large')]),
        ),
        migrations.AlterUniqueTogether(
            name='geographiclocation',
            unique_together=set([('accuracy', 'easting', 'latitude', 'longitude', 'northing')]),
        ),
        migrations.AlterUniqueTogether(
            name='foundcategory',
            unique_together=set([('category', 'category_id', 'count', 'is_restricted', 'name')]),
        ),
        migrations.AddField(
            model_name='flatmates',
            name='found_categories',
            field=models.ManyToManyField(help_text='A collection of suggested categories and the number of search results in each category.', related_name='flatmates_reverse_found_categories', to='raw.FoundCategory'),
        ),
        migrations.AddField(
            model_name='flatmates',
            name='list',
            field=models.ManyToManyField(help_text='A list of the results in the current page.', related_name='flatmates_reverse_list', to='raw.Flatmate'),
        ),
        migrations.AddField(
            model_name='flatmates',
            name='member_profile',
            field=models.ForeignKey(blank=True, help_text='Details of the member that is being filtered on. Not returned unless member_listing is non-zero and return_metadata is true.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flatmates_reverse_member_profile', to='raw.MemberProfile'),
        ),
        migrations.AddField(
            model_name='flatmates',
            name='parameters',
            field=models.ManyToManyField(help_text='A list of search parameters which are applicable to the searched category. Not returned unless return_metadata is true.', related_name='flatmates_reverse_parameters', to='raw.SearchParameter'),
        ),
        migrations.AddField(
            model_name='flatmates',
            name='sort_orders',
            field=models.ManyToManyField(help_text='A list of sort orders which are applicable to the searched category. Not returned unless return_metadata is true.', related_name='flatmates_reverse_sort_orders', to='raw.AttributeOption'),
        ),
        migrations.AddField(
            model_name='flatmates',
            name='super_features',
            field=models.ManyToManyField(help_text='A randomised collection of super features matching the current search', related_name='flatmates_reverse_super_features', to='raw.Flatmate'),
        ),
        migrations.AlterUniqueTogether(
            name='flatmatephotourls',
            unique_together=set([('value',)]),
        ),
        migrations.AlterUniqueTogether(
            name='flatmateadjacentsuburbnames',
            unique_together=set([('value',)]),
        ),
        migrations.AlterUniqueTogether(
            name='flatmateadjacentsuburbids',
            unique_together=set([('value',)]),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='adjacent_suburb_ids',
            field=models.ManyToManyField(help_text='The IDs of any adjacent suburbs.', related_name='flatmate_reverse_adjacent_suburb_ids', to='raw.FlatmateAdjacentSuburbIds'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='adjacent_suburb_names',
            field=models.ManyToManyField(help_text='The names of any adjacent suburbs.', related_name='flatmate_reverse_adjacent_suburb_names', to='raw.FlatmateAdjacentSuburbNames'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='agency',
            field=models.ForeignKey(blank=True, help_text='Details of the agency this property was listed by.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flatmate_reverse_agency', to='raw.Agency'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='branding',
            field=models.ForeignKey(blank=True, help_text='A list of branding images associated with this listing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flatmate_reverse_branding', to='raw.Branding'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='geographic_location',
            field=models.ForeignKey(blank=True, help_text='The geographic location (latitude and longitude) of a property.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flatmate_reverse_geographic_location', to='raw.GeographicLocation'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='open_homes',
            field=models.ManyToManyField(help_text='A collection of open home times for this listing. Only applies to open home listings.', related_name='flatmate_reverse_open_homes', to='raw.OpenHome'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='photo_urls',
            field=models.ManyToManyField(help_text='A collection of photo urls for the listing', related_name='flatmate_reverse_photo_urls', to='raw.FlatmatePhotoUrls'),
        ),
        migrations.AddField(
            model_name='flatmate',
            name='variant_definition_summary',
            field=models.ForeignKey(blank=True, help_text='A summary of the variant information.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flatmate_reverse_variant_definition_summary', to='raw.VariantDefinitionSummary'),
        ),
        migrations.AddField(
            model_name='fixedpriceofferrecipient',
            name='member',
            field=models.ForeignKey(blank=True, help_text='Member details for the recipient of the offer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fixed_price_offer_recipient_reverse_member', to='raw.Member'),
        ),
        migrations.AddField(
            model_name='fixedpriceofferdetails',
            name='recipients',
            field=models.ManyToManyField(help_text='A list of recipients for the offer. Only available if you are the seller.', related_name='fixed_price_offer_details_reverse_recipients', to='raw.FixedPriceOfferRecipient'),
        ),
        migrations.AlterUniqueTogether(
            name='embeddedcontent',
            unique_together=set([('matterport_key', 'you_tube_video_key')]),
        ),
        migrations.AddField(
            model_name='district',
            name='suburbs',
            field=models.ManyToManyField(help_text='The list of suburbs that belong to this district.', related_name='district_reverse_suburbs', to='raw.Suburb'),
        ),
        migrations.AlterUniqueTogether(
            name='dealershowroom',
            unique_together=set([('id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='dealershipphonenumbers',
            unique_together=set([('value',)]),
        ),
        migrations.AlterUniqueTogether(
            name='dealershiplistingcounts',
            unique_together=set([('bikes', 'boats', 'cars', 'total')]),
        ),
        migrations.AddField(
            model_name='dealership',
            name='listing_counts',
            field=models.ForeignKey(blank=True, help_text='Count of listings of dealership', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dealership_reverse_listing_counts', to='raw.DealershipListingCounts'),
        ),
        migrations.AddField(
            model_name='dealership',
            name='phone_numbers',
            field=models.ManyToManyField(help_text='Array of up to two phone numbers which can be used to reach the dealership', related_name='dealership_reverse_phone_numbers', to='raw.DealershipPhoneNumbers'),
        ),
        migrations.AddField(
            model_name='dealership',
            name='showroom',
            field=models.ForeignKey(blank=True, help_text='The show room of the Dealership', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dealership_reverse_showroom', to='raw.DealerShowroom'),
        ),
        migrations.AlterUniqueTogether(
            name='dealer',
            unique_together=set([('e_mail', 'fax_number', 'full_name', 'home_phone_number', 'mobile_phone_number', 'office_phone_number', 'position')]),
        ),
        migrations.AlterUniqueTogether(
            name='currentshippingpromotion',
            unique_together=set([('threshold', 'threshold_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='contactdetails',
            unique_together=set([('best_contact_time', 'contact_name', 'mobile_phone_number', 'phone_number', 'website')]),
        ),
        migrations.AlterUniqueTogether(
            name='charity',
            unique_together=set([('charity_type', 'description', 'image_source', 'tagline')]),
        ),
        migrations.AlterUniqueTogether(
            name='broadbandtechnology',
            unique_together=set([('availability', 'completion', 'max_down', 'max_up', 'min_down', 'min_up', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='branding',
            unique_together=set([('background_color', 'disable_banner', 'large_banner_url', 'large_square_logo', 'large_wide_logo', 'office_location', 'stroke_color', 'text_color')]),
        ),
        migrations.AddField(
            model_name='bid',
            name='bidder',
            field=models.ForeignKey(blank=True, help_text='The member who placed the bid.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bid_reverse_bidder', to='raw.Member'),
        ),
        migrations.AlterUniqueTogether(
            name='attributerange',
            unique_together=set([('lower', 'upper')]),
        ),
        migrations.AlterUniqueTogether(
            name='attributeoption',
            unique_together=set([('count', 'display', 'value')]),
        ),
        migrations.AddField(
            model_name='attribute',
            name='options',
            field=models.ManyToManyField(help_text='A list of options, if the attribute is restricted to a fixed set of values. Not required when selling or editing.', related_name='attribute_reverse_options', to='raw.AttributeOption'),
        ),
        migrations.AddField(
            model_name='attribute',
            name='range',
            field=models.ForeignKey(blank=True, help_text='The allowed range of the attribute. Only applies to numeric attributes. Not required when selling or editing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attribute_reverse_range', to='raw.AttributeRange'),
        ),
        migrations.AlterUniqueTogether(
            name='agent',
            unique_together=set([('e_mail', 'fax_number', 'full_name', 'home_phone_number', 'mobile_phone_number', 'office_phone_number', 'photo', 'position', 'url_slug')]),
        ),
        migrations.AddField(
            model_name='agency',
            name='agents',
            field=models.ManyToManyField(help_text='The contact details of contacts within the agency.', related_name='agency_reverse_agents', to='raw.Agent'),
        ),
        migrations.AddField(
            model_name='agency',
            name='branding',
            field=models.ForeignKey(blank=True, help_text='The branding object for the company.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agency_reverse_branding', to='raw.Branding'),
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together=set([('address1', 'address2', 'city', 'country', 'name', 'phone_number', 'postcode', 'suburb')]),
        ),
        migrations.AlterUniqueTogether(
            name='variant',
            unique_together=set([('is_clearance', 'listing_id', 'price', 'quantity', 'sku', 'was_price')]),
        ),
        migrations.AlterUniqueTogether(
            name='store',
            unique_together=set([('banner_image_uri', 'large_banner_image', 'location', 'logo_image_uri', 'name', 'phone_number', 'short_description', 'store_path', 'website')]),
        ),
        migrations.AlterUniqueTogether(
            name='searchparameter',
            unique_together=set([('allows_multiple_values', 'dependent_on', 'dependent_parameter', 'display_name', 'external_options_key', 'lower_bound_name', 'mutual_exclusion_group', 'name', 'type', 'upper_bound_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='sale',
            unique_together=set([('buyer', 'credit_card_last_four_digits', 'credit_card_payment_date', 'credit_card_type', 'delivery_address', 'delivery_details_sent', 'has_buyer_placed_feedback', 'has_paid_by_credit_card', 'has_seller_placed_feedback', 'is_payment_pending', 'message_from_buyer', 'method', 'order_id', 'payment_instructions', 'price', 'purchase_id', 'quantity_sold', 'reference_number', 'selected_shipping', 'shipping_price', 'shipping_type', 'sold_date', 'status', 'status_date', 'subtotal_price', 'total_sale_price', 'total_shipping_price')]),
        ),
        migrations.AlterUniqueTogether(
            name='questions',
            unique_together=set([('page', 'page_size', 'total_count')]),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together=set([('answer', 'answer_date', 'asking_member', 'comment', 'comment_date', 'is_seller_comment', 'listing_id', 'listing_question_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='property',
            unique_together=set([('property_id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='properties',
            unique_together=set([('did_you_mean', 'favourite_id', 'favourite_type', 'member_profile', 'page', 'page_size', 'total_count')]),
        ),
        migrations.AlterUniqueTogether(
            name='photo',
            unique_together=set([('photo_id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='optionset',
            unique_together=set([('name',)]),
        ),
        migrations.AlterUniqueTogether(
            name='memberprofile',
            unique_together=set([('biography', 'date_removed', 'favourite_id', 'first_name', 'is_enabled', 'member', 'occupation', 'photo', 'quote', 'store')]),
        ),
        migrations.AlterUniqueTogether(
            name='listeditemdetail',
            unique_together=set([('listing_id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='flatmates',
            unique_together=set([('did_you_mean', 'favourite_id', 'favourite_type', 'member_profile', 'page', 'page_size', 'total_count')]),
        ),
        migrations.AlterUniqueTogether(
            name='flatmate',
            unique_together=set([('listing_id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='fixedpriceofferrecipient',
            unique_together=set([('decision', 'member')]),
        ),
        migrations.AlterUniqueTogether(
            name='fixedpriceofferdetails',
            unique_together=set([('offer_expiry_date', 'offer_price', 'quantity')]),
        ),
        migrations.AlterUniqueTogether(
            name='dealership',
            unique_together=set([('id',)]),
        ),
        migrations.AlterUniqueTogether(
            name='bidcollection',
            unique_together=set([('page', 'page_size', 'total_count')]),
        ),
        migrations.AlterUniqueTogether(
            name='bid',
            unique_together=set([('account', 'bid_amount', 'bid_date', 'bidder', 'is_buy_now', 'is_by_mobile', 'is_by_proxy')]),
        ),
        migrations.AlterUniqueTogether(
            name='attribute',
            unique_together=set([('display_name', 'display_value', 'is_required_for_sell', 'name', 'range', 'type', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='agency',
            unique_together=set([('id',)]),
        ),
    ]
